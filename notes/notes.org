#+title: Karachentsev List notes
#+bibliography: "../My Library/My Library.bib"
#+PROPERTY: header-args :lang python :eval python :exports results :tangle list.py :results value  :session main


This list contains measurements from the galaxies in the Local Cosmological Volume (LCV), and the last update of data is on <2023-11-22 Wed>. I downloaded the database from [cite:@karachentsevUPDATEDNEARBYGALAXY2013]

* Download Script

Because I have to download each tables seperately from the site, I use this script



#+begin_src sh :results none

cd ~/Documents/Research_paper_SFR/
wget --no-check-certificate -r -nH --cut-dirs=2 --accept="*.dat" --reject="*8.dat" -e robots=off -U mozilla https://www.sao.ru/lv/lvgdb/tables/

#+end_src



Let's break down the wget command and its various options:

+ --no-check-certificate: This option tells wget to not check SSL certificates. It's useful when dealing with websites that have self-signed or expired SSL certificates.

+ -r or --recursive: This option enables recursive downloading. It means that wget will follow links and download files from the specified URL as well as its subdirectories.

+ -nH or --no-host-directories: This option disables the creation of host directories. Without this option, wget would create a directory structure based on the hostname of the server.

+ --cut-dirs=2: This option instructs wget to ignore the first two directory components when creating the local directory structure. In this case, it helps to avoid creating unnecessary parent directories based on the server's directory structure.

+ --accept="*.dat": This option specifies the file types to accept during the download. In this case, only files with the extension ".dat" will be downloaded.

+ --reject="*8.dat": This option specifies the file types to reject during the download. Files with names containing "8.dat" will be excluded from the download.

+ -e robots=off: This option tells wget to ignore the robots.txt file, which is a file used by websites to communicate with web crawling and scraping bots about which parts of the site should not be crawled.

+ -U mozilla: This option sets the User-Agent header to "mozilla". The User-Agent header is used by the browser to identify itself to the server. In this case, it's set to mimic a Mozilla browser.

Finally, the URL https://www.sao.ru/lv/lvgdb/tables/ is the starting point for the recursive download.


* Original data set

The data I will use for this project come from the Karachentsev  catalog (2022-12-02), which is an updated version of the list used in Kroupa et al. 2020
From the list I use the tables "Catalog of Nearby Galaxies", "Global Parameters of the Nearby Galaxies" and "List of the nearby galaxies with measured SFR"

#+begin_src python

import numpy as np
from astropy.io import ascii
from astropy.coordinates import SkyCoord, ICRS, Galactic, FK4, FK5, Angle
from astropy.table import Table, QTable, join, hstack, vstack, unique, Column, MaskedColumn, setdiff
from astropy.utils.masked import Masked
from astropy.coordinates import SkyCoord, Galactic, Angle
from astropy.time import Time
import astropy.units as u
from astropy.utils.diff import report_diff_values
import astropy.constants as const
import glob as glob
import pandas as pd
import sys
import os

os.chdir("/home/dp/Documents/Research_paper_SFR/notes")
file_pattern = "../tables/lvg_table*.dat"

# Use glob to find all matching files
file_paths = sorted(glob.glob(file_pattern))

dq = []  # Create an empty list to store Tables

for file_path in file_paths:
    table = Table(ascii.read(file_path, format="mrt"),masked=True)
    dq.append(table)
#+end_src

#+RESULTS:


#+begin_src python

nm = []
nm = ["cat", "param", "magn", "vel", "kin", "dist", "sfr"]

# Automatically associate the names with the Tables
for i in range(len(nm)):
    globals()[nm[i]] = dq[i]
#+end_src

#+RESULTS:

** Table 3

I will need the colors, so i think the best way is to create tables for each filter and then join them. I also delete the column r_mag = Reference for mag observation

#+begin_src python :results none

magn.remove_column("r_mag")

#+end_src

#+begin_src python :results value

magn["Filter"][magn["Filter"] == "FU"] = "FUV"

filters = magn.group_by("Filter")

keys = filters.groups.keys["Filter"]
keys[keys == "FU"] = "FUV"
indices = filters.groups.indices


magn_table = Table()
dcolor = []
pain = 0
n = 0
print(indices,"\n", keys,"\n")
for ind in indices[1:]:
    magn_table = filters[pain:ind]
    magn_table.rename_column("l_mag", f"l_mag_{keys[n]}")
    magn_table.rename_column("mag", f"mag_{keys[n]}")
    magn_table.rename_column("e_mag", f"e_mag_{keys[n]}")
    magn_table.remove_column("Filter")
    print("\n********************",keys[n],"********************\n",magn_table.info, )
    pain = ind
    n+=1
    dcolor.append(magn_table)
colors = Table(dcolor[0])

for dcolor_item in dcolor[1:]:
    colors = Table(join(colors, dcolor_item, keys="Name", join_type="outer"))

colors.info
#+end_src

#+RESULTS:


** Merging the tables

*** Fixing the conflicts

**** A26 and AB
#+begin_src python
param.rename_column("a26", "A26")
param.rename_column("AB","AB_int")
#+end_src

#+RESULTS:

**** W50
#+begin_src python

identical = report_diff_values(cat["Name","W50"], kin["Name", "W50"])
print(identical)
#+end_src

#+RESULTS:

But, according to the metadata of table 1 "Note (9): The main source of W50 data was LEDA, as well as the HIPASS and ALFALFA surveys. The references to individual W50 measurements are presented in Table 5 and the LV database"

So I can drop the column of table 1 and only keep the table 5 W50

#+begin_src python
cat.remove_column("W50")
kin.remove_column("r_W50")
#+end_src

#+RESULTS:

**** BMag

The BMags of Table 2 and Table 7 have some differences (in the version of 14/11/2023).
+ The SFR(BMag) has less values than CAT(BMag)
+ The SFR(BMag) has better precision (.01)

#+begin_src python
# Open a file for writing
with open('diff_report.txt', 'w') as file:
    # Redirect the output to the file
   identical = report_diff_values(param["Name","BMag"], sfr["Name", "BMag"], rtol=0.7, atol=0.7, fileobj=file)
identical
#+end_src

#+RESULTS:

To keep all the values and the high precision, I will join the tables so the SFR_B will have masked values for the missing galaxies, and then I will replace the masks with the values of CAT_B

#+begin_src python
bmag = join(param["Name","BMag"], sfr["Name","BMag"], join_type='outer', keys = "Name")

# Find indices where 'BMag_2' is NaN
missing_indices = np.isnan(bmag['BMag_2'])

# Replace NaN values in 'BMag_2' with corresponding values from 'BMag_1'
bmag['BMag_2'][missing_indices] = bmag['BMag_1'][missing_indices]

bmag.rename_column("BMag_2", "BMag")
bmag.remove_column("BMag_1")

print(bmag["BMag"])

#+end_src

#+RESULTS:

#+begin_src python

sfr.remove_column("BMag")
param.remove_column("BMag")
sfr = QTable(join(sfr,bmag, join_type = "outer"))

sfr.info()
#+end_src

#+RESULTS:

**** Right Ascension

#+begin_src python
with open('diff_report_RAh.txt', 'w') as file:
    # Redirect the output to the file
   identical = report_diff_values(param["Name","RAh"], sfr["Name", "RAh"], fileobj=file)
print(identical)
#+end_src

#+RESULTS:

As I observe, the Right Ascension of CAT and PARAM are the same and the problem is with the SFR table. Plus, as I see from the file "./diff_report_RAh.txt" the differences are marked as +,  indicating new rows in the table.

So I can drop them in the table SFR.

#+begin_src python
columns_to_remove = ["RAh", "RAm", "RAs", "DE-", "DEd","DEm", "DEs"]
# Remove the identified columns
for col in columns_to_remove:
    sfr.remove_column(col)
#+end_src

#+RESULTS:

**** Types

The SFR and CAT tables have the same column, the de Vaucouleurs morphological type.

#+begin_src python

identical = report_diff_values(cat["Name","TType"], sfr["Name", "T"])

#+end_src

#+RESULTS:

The problem is that the SFR table is smaller, so it cannot join. I will follow the same steps as in BMag.

#+begin_src python
ttype = Table(join(cat["Name","TType"], sfr["Name","T"], join_type='outer', keys = "Name"))
print(ttype.info)
#+end_src

#+RESULTS:

Since each galaxy can have only one  morphological type and as I can see the only difference is that they have is the number of values, I will keep the longer column
#+begin_src python
sfr.remove_column("T")
#+end_src

#+RESULTS:

**** Remove References
I have already removed some references. Lets finish it

#+begin_src python
vel.remove_column("r_cz")
dist.remove_column("r_DM")
dist.remove_column("n_DM") # Method used to determine DM

#+end_src

#+RESULTS:

*** Merging


#+begin_src python
# Find the index of "magn" in the list
index_to_replace = nm.index("magn")

# Replace "magn" with "color"
nm[index_to_replace] = "colors"
#+end_src

#+RESULTS:
: None

#+begin_src python
dtables = []


for i in range(len(nm)):
    lists = Table(globals()[nm[i]])
    dtables.append(lists)
#+end_src

#+RESULTS:

#+begin_src python

dt = dtables[0]
for data in dtables[1:]:
    dt = Table(join(dt, data, join_type="outer"))
print(dt.info)
#+end_src

#+RESULTS:



** Tiny problem with the DE- of 6dF J2218489-46130

I have noticed that the specific galaxy has a tiny problem

#+begin_src python

print(dt[dt["Name"] == "6dF J2218489-46130"])

#+end_src

#+RESULTS:

Can you spot it? Indeed, the galaxy has such a big name that it moves the data. And that creates a lot of shenanigans in that row. So the fastest way to find the problem is to check if the DE- is a string or not and then, if it is not, delete it.

#+begin_src python
mask = ~((dt['DE-'] == '-') | (dt['DE-'] == '+'))

# Get the rows to delete
rows_to_delete = dt[mask]

# Filter the table to keep only the rows where 'DE-' is either '+' or '-'
dt = dt[~mask]

# Print the rows to delete
print("Rows to delete:", len(rows_to_delete))
print(rows_to_delete)
print("Remaining Galaxies:", len(dt))
#+end_src

#+RESULTS:

But wont that create a *"stATIstIcaL PRoBlEM wiTh the Data sET"*? Lets see src_python[:results output]{print(len(rows_to_delete)/len(dt)*100,"%")} {{{results(==)}}}

Same for MKT J045920.2-252959 MKT J125225.4-124304.1

* Fixing the units
** Log (dex) units in linear

Astropy doesn't fully support logarithmic units, so we have to turn them to linear!

I get ~WARNINGS~ for "column logKLum", "column logM26" and "column logMHI". None of them has errors so we only have to change one column!

#+begin_src python
dt["KLum"] = (10**dt["logKLum"])
dt["KLum"].unit = u.Lsun
dt["KLum"].description = "Linear K_S_ band luminosity"

dt["M26"] = (10**dt["logM26"])
dt["M26"].unit = u.Msun
dt["M26"].description = "Linear mass within Holmberg radius"

dt["MHI"] = (10**dt["logMHI"])
dt["MHI"].unit = u.Msun
dt["MHI"].description = "Linear hydrogen mass"
dt[["KLum", "M26", "MHI"]].info
#+end_src

#+RESULTS:


* Using Skycoord


I can use skycoord to merge the coordinates.

#+begin_src python
data_table = dt.copy() # At first I was afraid, I was petrified, that this would break everything so I did it after I saved the file. Now I put it here and we will see (:

ra_hour_column = data_table['RAh']
ra_minute_column = data_table['RAm']
ra_second_column = data_table['RAs']
dec_sign_column = data_table['DE-']
dec_degree_column = data_table['DEd']
dec_minute_column = data_table['DEm']
dec_second_column = data_table['DEs']

# Create SkyCoord objects with strings
ra_str = [f"{hour}:{minute}:{second:.1f}" for hour, minute, second in zip(ra_hour_column, ra_minute_column, ra_second_column)]
dec_str = [f"{sign}{degree}:{minute}:{second:.1f}" for sign,degree, minute, second in zip(dec_sign_column, dec_degree_column, dec_minute_column, dec_second_column)]

# Create SkyCoord objects in the Galactic coordinate system
galactic_coords = data_table['Coordinates'] = SkyCoord(ra_str, dec_str, obstime = "J2000", unit=(u.hourangle, u.deg))
# Print the Galactic coordinates
print(galactic_coords)
data_table.remove_column('RAh')
data_table.remove_column('RAm')
data_table.remove_column('RAs')
data_table.remove_column('DE-')
data_table.remove_column('DEd')
data_table.remove_column('DEm')
data_table.remove_column('DEs')

column_order = ["Name","Coordinates"] + [col for col in data_table.colnames if col not in ["Name","Coordinates"]]

# Reorder columns
data_table = data_table[column_order]
data_table.info()
#+end_src

#+RESULTS:



* Writing
#+begin_src python
data_table.write("../tables/final_table.fits", overwrite=True)
#+end_src

#+RESULTS:


* IDEAS
** IDEA mapping with Color, type of galaxy, SFR, Velocity
** IDEA machine learning
*** Bands (FUV)
*** missing SFR
** use the limit flags as a comparison

** IDEA for graphs
[[./idea_for_graphs.jpg]]




* Questions
** [X] What is the W50 velocity = Observed HI line width at 50% level
** [?] What are the P and F evolutionary parameters
