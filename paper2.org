#+title:Investigations of the galaxies of the LCV
#+author: Dimitrios Papachistopoulos
#+PROPERTY: header-args :lang python :eval python :exports results :tangle final.py :results value drawer :session main

:latex_prop:
#+OPTIONS: toc:nil
#+LaTeX_CLASS_OPTIONS: [a4paper,twocolumn]
#+LaTeX_HEADER: \usepackage{breakcites}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{biblatex}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{caption}
#+LaTeX_HEADER: \usepackage{booktabs}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{tgbonum}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum
#+OPTIONS: tex:imagemagick
#+bibliography:./bibl/bibliography/bibliography.bib
:end:

#+begin_src python :results none
import numpy as np
import pandas as pd
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf
from tabulate import tabulate
import uncertainties as unc



pd.set_option('display.float_format', lambda x: '%.2E' % x)
######Print images with caption
def caption(fname,caption,name = None):
    if name == None:
        name = caption
    return "#+name: fig:{} \n#+label: fig:{} \n#+caption:{} \n#+ATTR_LaTeX: :placement [!htpb]\n[[./{}.png]]".format(caption,name,name,fname)

def simple_regplot(data ,
    X, Y, cap = None, name = None, n_std=2, n_pts=100, ax=None, scatter_kws=None, line_kws=None, ci_kws=None):
    df_data=data
    x=df_data[X]
    y=df_data[Y]
    """ Draw a regression line with error interval. """
    ax = plt.gca() if ax is None else ax

    # calculate best-fit line and interval
    x_fit = sm.add_constant(x)
    fit_results = sm.OLS(y, x_fit,missing='drop').fit()

    xconst=f'{fit_results.params[1]:.3f}'
    const=f'{fit_results.params[0]:.3f}'
    eval_x = sm.add_constant(np.linspace(np.min(x), np.max(x), n_pts))
    pred = fit_results.get_prediction(eval_x)

    # draw the fit line and error interval
    ci_kws = {} if ci_kws is None else ci_kws
    ax.fill_between(
        eval_x[:, 1],
        pred.predicted_mean - n_std * pred.se_mean,
        pred.predicted_mean + n_std * pred.se_mean,
        facecolor ='red',
        alpha=0.5,
        ,**ci_kws,
    )
    line_kws = {} if line_kws is None else line_kws
    h = ax.plot(eval_x[:, 1], pred.predicted_mean, **line_kws,color='red',linestyle='dashed',label= Y+"="+xconst+X+"+"+const)

    # draw the scatterplot
    scatter_kws = {} if scatter_kws is None else scatter_kws
    ax.scatter(x, y, **scatter_kws,label="Data")

    ax.set_title(Y+ "=f("+X+ ")")
    ax.grid()
    ax.set_xlabel(X)
    ax.set_ylabel(Y)
    ############################
    # if log == 1:             #
    #     ax.set_yscale("log") #
    #     ax.set_xscale("log") #
    ############################

    ax.legend(loc = "best")
    if scatter_kws == {}:
        lab = X+"-"+Y
        fname = "figs/"+lab
        plt.savefig(fname)
        plt.close()
    else:
        col = scatter_kws["c"].name
        PCM=ax.get_children()[2] #get the mappable, the 1st and the 2nd are the x and y axes
        plt.colorbar(PCM, ax=ax).set_label(col)
        lab = X+"-"+Y+"-color_"+col
        fname = "figs/"+lab
        plt.savefig(fname)
        plt.close()

    if name == None:
        name = cap

    Cap = "#+name: fig:{} \n#+caption:{}\n#+ATTR_LaTeX: :placement [!htpb] \n[[./{}.png]]".format(name,cap,fname)
    return fit_results, Cap , lab

# Calculate the bin width using the Freedman-Diaconis rule
def fd_bins(x):
    iqr = x.quantile(0.75) - x.quantile(0.25)
    bin_width = 2 * iqr / x.count()**(1/3)

    # Calculate the number of bins using the bin width
    return int((df[x].max() - df[x].min()) / bin_width)
#
## Format the table as a string using the tabulate library
def no_col_str(df,string):
    return df.drop(df.filter(regex=string).columns, axis=1)
#######


#### PRINTING THE OLS PARAMETERS AS LATEX
def inline_ols(y,x,ols):
        return "${} = ({:.ueSL})\cdot {} + ({:.ueSL})$".format(y, unc.ufloat(ols[0].params[1], ols[0].bse[1]), x, unc.ufloat(ols[0].params[0], ols[0].bse[0]))

def inline_r2(ols):
        return r"$R^2 = {}\%$ \noindent".format(round(ols[0].rsquared*100))

def eq_ols(y,x,ols):
    return (r"\begin{"+"equation"+"}\label{eq:"+"{}".format(ols[2])+"}\n"+
            r"\begin{"+"align"+"}\n"+
            "& {} = ({:.ueSL})\cdot {} + ({:.ueSL}) \\\ \n".format(y, unc.ufloat(ols[0].params[1], ols[0].bse[1]), x, unc.ufloat(ols[0].params[0], ols[0].bse[0]))+
            r"& \textrm"+"{"+"with correlation "+"}"+" R^2={}\%\n".format(round(ols[0].rsquared*100))+
            r"\end{"+"align"+"}\n"+
            "\end{"+"equation"+"}\n"+r"\noindent")
#+end_src


#+begin_src python :results none

flag=pd.read_csv("Karachentsev_list_flags.csv")


data = pd.read_csv("Karachentsev_list.csv")
data["TType"] = data["TType"].astype('category')
data["Tdw1"] = data["Tdw1"].astype('category')
data["Tdw2"] = data["Tdw2"].astype('category')

df = data.copy()
df['SFR_Ha']=10**df['log_SFR_Ha']

df['SFR_FUV']=10**df['log_SFR_FUV']

df['K']=10**df['logKLum']

df['MHI']=10**df['logMHI']

df["color"] = -df["Bmag"] + df['FUVmag']
#+end_src
** TODO no indent
** TODO fullstops
** TODO Units in the plots

#+begin_abstract
The paper investigates the properties of galaxies in the Local Cosmological Volume (LCV), using the Catalogue of Neighboring Galaxies[cite:@karachentsevUPDATEDNEARBYGALAXY2013] and its updated version from the "Catalog & Atlas of the LV galaxies" database[cite:@CatalogLVGalaxies]. The properties studied include the galaxy types, their various masses, the star formation rates (SFRs) and the star formation timescale $\tau$, gas depletion timescale $\tau_g$ and the star formation time $t_{sf}$. The paper aims to understand the distribution and correlation of these properties in the sample of galaxies in the LCV, and how they relate to current astrophysical theories.
#+end_abstract

* The Galaxies in the Local Cosmological Volume (LCV)

The Catalogue of Neigbouring Galaxies (Karachentsev, Igor D. and Makarov  et al. 2013[cite:@karachentsevUPDATEDNEARBYGALAXY2013]) and its updated version from the "Catalog & Atlas of the LV galaxies" database[cite:@CatalogLVGalaxies]  are used to extract the B-band, FUV \& K-band luminosities[fn:2] , the types of the galaxie[fn:1]s, the mass within the Holmberg radius (M26), the Hydrogen masses of the galaxies ($M_{HI}$) and the SFRs based on integrated  H and far-ultraviolet (FUV) measurments for galaxies within a distance of $\approx 11$ Mpc. Some of those values contain limit flags, which we exclude from our present analysis. This gives a sample of src_python[]{data.Name.count()} {{{results(793)}}} galaxies from src_python[]{flag.Name.count()} {{{results(1248)}}}. From the remaing galaxies we have

#+begin_src python
temp_table = no_col_str(df,'log')
temp_table = temp_table.count()
temp_table.columns = ["sepal_length", "sepal_width"]
temp_table.to_markdown(headers = ["Measurment","Number of Galaxies"] ,tablefmt= "orgtbl")
#+end_src

#+RESULTS:
:results:
| Measurment   |   Number of Galaxies |
|--------------+----------------------|
| Name         |                  793 |
| FUVmag       |                  687 |
| TType        |                  793 |
| Tdw1         |                  580 |
| Tdw2         |                  568 |
| Bmag         |                  790 |
| SFR_Ha       |                  566 |
| SFR_FUV      |                  688 |
| K            |                  789 |
| MHI          |                  643 |
| color        |                  686 |
:end:


The K-band values are converted to the total Stellar Masses of each galaxy according to the mass-to-light ratio of 0.6 (\cite{lelliSPARCMASSMODELS2016}), and the $M_{HI}$ can be converted to the total mass of the gas of the galaxy using the equation $M_g=1.33\,M_{HI}$

The total SFR of each galaxy can be calcuated by

$$
    SFR_o=\frac{SFR_{FUV}+SFR_{Ha}}{2}
$$
\noindent
if both $SFR_{H\alpha},SFR_{FUV}$ measurments are available. If only one only one of them is given, then the SFR is equal to the given SFR value


$$
    SFR_o=SFR_i,\ \text{if } SFR_j=0,i\neq j,\ i,j=FUV, H_a
$$

#+begin_src python :results none

##Average SFR
df['SFR_0']=df[ ['SFR_Ha','SFR_FUV']].mean(axis=1, skipna=True)
df['log_SFR_0']= np.log10(df['SFR_0'])
##Clipping
df=df[(df.SFR_0>=10**(-3))]

#Masses
df['StellarMass']=0.6*df['K']
df["logStellarMass"]=np.log10(df['StellarMass'])

df["Mg"]=1.33*df["MHI"]
df["logMg"]=np.log10(df["Mg"])

df["Mt"]=df["Mg"]+df["StellarMass"]
df['logMt']=np.log10(df['Mt'])

df["Mass_ratio"]=df["StellarMass"]/df["Mg"]
df["log_Mass_ratio"]=np.log10(df["Mass_ratio"])

#+end_src

The condition $SFR_o\geq 10^{-3}M_\odot yr^{-1}$ leaves src_python[]{df.Name.count()} {{{results(579)}}}
galaxies. This condition is applied due to the reasons given in the P. Kroupa,M. Haslbauer, I. Banik, S. T. Nagesh and J. Pflamm-Altenburg et al. 2020 \cite{kroupaConstraintsStarFormation2020}

* Types of galaxies

Using the dataset of 1248 galaxies, do before using the condition and removing the galaxies with the flags, the below histograms can be plotted.

Most of the galaxies in the LCV are Irregular galaxies followed by lenticular galaxies

Out of the 1248 galaxies the 1022 are dwarf galaxies

** TODO write a table with the types

Most dwarf galaxies have low brightness and are irregulars followed by Dwarf spheroidal.

#+begin_src python :results none

typ=pd.read_csv("Karachentsev_list_flags.csv")
typ["TType"]=typ["TType"].astype('category')
typ["Tdw1"]=typ["Tdw1"].astype('category')
typ["Tdw2"]=typ["Tdw2"].astype('category')
print(typ.count())
typ['TType'].value_counts(sort=False).plot(kind='bar',logy=True,grid = 'True')
plt.xlabel("Morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("figs/hist-Type")
plt.close()
#+end_src
#+caption: The classification by de Vaucouleurs et al. (1991) is used for the morphology of the galaxies
#+name: Types of galaxies
[[./figs/hist-Type.png]]

#+begin_src python :results none
typ['Tdw1'].value_counts(sort=False).plot(kind='bar', logy=True,grid = 'True')
plt.xlabel("Dwarf galaxy morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("figs/hist-Tdw1")
plt.close()

#+end_src
#+caption: Dwarf galaxy morphology
#+name: Types of dwarf galaxies
[[./figs/hist-Tdw1.png]]

#+begin_src python  :results none
typ['Tdw2'].value_counts(sort=False).plot(kind='bar', logy=True,grid = 'True')
plt.xlabel("Dwarf galaxy surface brightness morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("figs/hist-Tdw2")
plt.close()
#+end_src
#+caption: Dwarf galaxy surface brightness morphology, where: H = high; N = normal; L = low; X = extremely low.
#+name: Types of dwarf galaxies brightness
[[./figs/hist-Tdw2.png]]


* Delayed-$\tau$ model

According to P. Kroupa et al. 2020[cite:@kroupaConstraintsStarFormation2020] current star formation rates of galaxies can be described by the 'delayed-$\tau$' model as


\begin{equation} \label{eq:SFR}
SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau},\text{ where } x=\frac{t_{sf}}{\tau}
\end{equation}

\noindent
where $\tau$ is the star formation time-scale,  $t_{sf}$ is the real time of star formation in a given galaxy and $A_{del}$ a normalization constant.

The average SFR is

\begin{equation}\label{eq:av_SFR-x}
\overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
\end{equation}
and can also be defined by the present day stellar mass

\begin{equation}\label{eq:av_SFR M*}
    \overline{SFR}=\frac{\zeta M_*}{t_{sf}}
\end{equation}
where $\zeta$ accommodates for mass-loss through stella evolution and $\zeta\approx 1.3$

This is a system of 2 equations and 3 variables, since A_{del} has never been calculated

** Constant $t_{sf}$
The observed ages of galactic discs are $t_{sf}\approx 12$ Gyr[cite:@knoxSurveyCoolWhite1999], so assuming an approximation of $t_{sf}=12.5$ Gyr, the $\overline{SFR_{del}}$ can be calcuated, from the equation (\ref{eq:av_SFR M*}).

#+begin_src python :results none

###Constant tsf
dts=df.copy()
tsf=12.5*10**9
zeta=1.3

dts['av_SFR']=dts['StellarMass']*1.3/(12.5*10**9)
dts['log_av_SFR']=np.log10(dts['av_SFR'])

dts['ratio']=dts['av_SFR']/dts['SFR_0']
dts['log_ratio']=np.log10(dts['ratio'])

#+end_src

After that the equation of ratio



\begin{equation} \label{eq:ratio}
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}
\end{equation}

can be solved numerically for $x$ and using the equations (\Ref{eq:SFR}) and (\Ref{eq:av_SFR-x}) the $A_{del}$ and $\tau$ of each galaxy are found.

#+begin_src python :results none
def sfrx(z):
    x =max(0,z)

    ratio=dts.loc[i]['ratio']

    #f=ratio-(np.exp(x)-np.abs(x)-1)/x**2
    f=ratio-(np.exp(x)-x-1)/x**2
    return f


for i in dts.index:
    #for i in dts.index:
    z = fsolve(sfrx,3.0)
    dts.at[i,'x_tsf']=(z)

dts["log_x_tsf"]=np.log10(dts["x_tsf"])
#+end_src

#+begin_src python
dts['tau']=tsf/dts['x_tsf']
dts["log_tau"]=np.log10(dts["tau"])

dts["A_tsf"]=dts["av_SFR"]*tsf/(1-(1+dts["x_tsf"])*np.exp(-dts['x_tsf']))
dts["log_A_tsf"] = np.log10(dts["A_tsf"])
dts[["A_tsf","tau","x_tsf"]].describe(include='all').round(3).to_markdown(tablefmt= "orgtbl")

#+end_src

#+RESULTS:
:results:
|       |         A_tsf |           tau |   x_tsf |
|-------+---------------+---------------+---------|
| count | 578           | 579           | 579     |
| mean  |   2.24715e+12 |   1.08958e+11 |   1.853 |
| std   |   3.93675e+13 |   1.04132e+12 |   1.476 |
| min   |   2.47798e+07 |   1.93205e+09 |   0.001 |
| 25%   |   1.40573e+08 |   4.18098e+09 |   0.565 |
| 50%   |   6.83764e+08 |   7.79265e+09 |   1.604 |
| 75%   |   5.70379e+09 |   2.21327e+10 |   2.99  |
| max   |   9.10088e+14 |   2.23774e+13 |   6.47  |
:end:

#+begin_src python 
fname = "figs/x-A_tsf"
dts.plot(kind='scatter', x='x_tsf', y='A_tsf',c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.grid()
plt.savefig(fname)
plt.close()
caption(fname,"$A_{del} = f(x)$ for constant t_{sf}")
#+end_src

#+RESULTS:
:results:
#+name: fig:$A_{del} = f(x)$ for constant t_{sf}
#+label: fig:$A_{del} = f(x)$ for constant t_{sf}
#+caption:$A_{del} = f(x)$ for constant t_{sf}
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x-A_tsf.png]]
:end:

#+begin_src python
fname = "figs/T-A_tsf"
dts.plot(kind='scatter', x='tau', y="A_tsf", c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()
caption(fname,r"$A_{del} = f(\tau)$ for constant t_{sf}")
#+end_src

#+RESULTS:
:results:
#+name: fig:$A_{del} = f(\tau)$ for constant t_{sf}
#+label: fig:$A_{del} = f(\tau)$ for constant t_{sf}
#+caption:$A_{del} = f(\tau)$ for constant t_{sf}
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/T-A_tsf.png]]
:end:

#+begin_src python
A_tsf_Mt = simple_regplot(dts,"logMt","log_A_tsf",scatter_kws={"c": dts["x_tsf"]}, cap = r"Total Mass $M_t$ - $A_{del}|_{t_{sf}}$" ,name = "A_tsf_Mt")
A_tsf_Mt[1]

#+end_src

#+RESULTS:
:results:
#+name: fig:A_tsf_Mt
#+caption:Total Mass $M_t$ - $A_{del}|_{t_{sf}}$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMt-log_A_tsf-color_x_tsf.png]]
:end:
#+begin_src python
eq_ols("$log(A_{del}|_t_{sf})","$log(M_t)$",  A_tsf_Mt)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logMt-log_A_tsf-color_x_tsf}
\begin{align}
& $log(A_{del}|_t_{sf}) = (9.6(4) \times 10^{-1})\cdot $log(M_t)$ + (8(4) \times 10^{-1}) \\
& \textrm{with correlation } R^2=48\%
\end{align}
\end{equation}
\noindent
:end:

** Constant $\tau$

#+begin_src python :results none

###Constant tau
dtau=df.copy()
tau=3.5*10**9
zeta=1.3

dtau["z"]=zeta*dtau["StellarMass"]/tau
#+end_src

Assuming for an constant $\tau=3.5$ Gyr, we cannot use the same $\overline{SFR}$ since it depends on $t_{sf}$. Using the equations~(\Ref{eq:av_SFR M*}) and (\Ref{eq:ratio})

$$
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}\Leftrightarrow \frac{e^x-x-1}{x}=\frac{\zeta M_*}{SFR\cdot\tau}
$$

using this equation $x$ and $A_{del}$ can be calculated numerically.

#+begin_src python :results none
def sfrx(var):
    x = max(13e-9,var)

    cons=dtau.loc[i]["z"]
    SFR=dtau.loc[i]['SFR_0']


    #f=ratio-(np.exp(x)-np.abs(x)-1)/x**2
    f=cons/SFR-(np.exp(x)-x-1)/x
    return f

for i in dtau.index:

    #for i in df.index:
    solution = fsolve(sfrx,3.0)
    dtau.at[i,'x_tau']=solution
dtau["log_x_tau"]=np.log10(dtau.x_tau)
#+end_src

#+begin_src python :results none
dtau["tsf"]=dtau['x_tau']*tau
dtau["log_tsf"]=np.log10(dtau.tsf)
dtau["av_SFR"]=dtau.z/dtau.x_tau
dtau['ratio']=dtau.av_SFR/dtau.SFR_0
dtau['A_tau']=tau*dtau['SFR_0']*np.exp(dtau.x_tau)/dtau.x_tau
dtau["log_A_tau"]=np.log10(dtau.A_tau)
#+end_src

#+begin_src python
dtau[["A_tau","x_tau","tsf"]].describe(include='all').to_markdown(tablefmt = "orgtbl")
#+end_src

#+RESULTS:
:results:
|       |         A_tau |      x_tau |           tsf |
|-------+---------------+------------+---------------|
| count | 579           | 579        | 579           |
| mean  |   4.58667e+09 |   2.54057  |   8.89201e+09 |
| std   |   1.49896e+10 |   0.956554 |   3.34794e+09 |
| min   |   9.87003e+06 |   0.406787 |   1.42376e+09 |
| 25%   |   6.50497e+07 |   1.87165  |   6.55079e+09 |
| 50%   |   2.36667e+08 |   2.43871  |   8.5355e+09  |
| 75%   |   1.11526e+09 |   3.07972  |   1.0779e+10  |
| max   |   1.0577e+11  |   5.77102  |   2.01986e+10 |
:end:

#+begin_src python  
fname = "figs/x-A_tau"
dtau.plot(kind='scatter', x='x_tau', y='A_tau',c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.grid()
plt.savefig(fname)
plt.close()

caption(fname,r"$A_{del} = f(x)$ for constant $\tau$")
#+end_src

#+RESULTS:
:results:
#+name: fig:$A_{del} = f(x)$ for constant $\tau$
#+label: fig:$A_{del} = f(x)$ for constant $\tau$
#+caption:$A_{del} = f(x)$ for constant $\tau$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x-A_tau.png]]
:end:


#+begin_src python
fname = "figs/T-A_tau"
dtau.plot(kind='scatter', x='tsf', y='A_tau',c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()

caption(fname,r"$A_{del} = f(t_{sf})$ for constant $\tau$")
#+end_src

#+RESULTS:
:results:
#+name: fig:$A_{del} = f(t_{sf})$ for constant $\tau$
#+label: fig:$A_{del} = f(t_{sf})$ for constant $\tau$
#+caption:$A_{del} = f(t_{sf})$ for constant $\tau$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/T-A_tau.png]]
:end:

#+begin_src python
A_tau_Mt = simple_regplot(dtau,"logStellarMass","log_A_tau",scatter_kws={"c": dtau["x_tau"]}, cap = r"Total Mass $M_t$ - $A_{del}|_{\tau}$", name = "A_tau_Mt")
A_tau_Mt[1]

#+end_src

#+RESULTS:
:results:
#+name: fig:A_tau_Mt
#+caption:Total Mass $M_t$ - $A_{del}|_{\tau}$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logStellarMass-log_A_tau-color_x_tau.png]]
:end:
#+begin_src python
eq_ols(r"$log(A_{del}|_\tau)", "$log(M_t)$", A_tau_Mt)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logStellarMass-log_A_tau-color_x_tau}
\begin{align}
& $log(A_{del}|_\tau) = (8.74(12) \times 10^{-1})\cdot $log(M_t)$ + (1.31(10) \times 10^{0}) \\
& \textrm{with correlation } R^2=90\%
\end{align}
\end{equation}
\noindent
:end:

** Comparing the two results

#+begin_src python :results none
dp=pd.merge(dtau[["Name","A_tau","log_A_tau", "x_tau", "tsf"]], dts, on = 'Name')
dp["log_x_tau"]=np.log10(dp["x_tau"])
dp["log_x_tsf"]=np.log10(dp["x_tsf"])
dp["log_tau"]=np.log10(dp["tau"])
dp["log_tsf"]=np.log10(dp["tsf"])
#+end_src

*** Comparing the $x$'s


Comparing the two different results for x, we see that the $x|_\tau$ has a lower $\sigma$

#+begin_src python

dp[["x_tau","x_tsf"]].describe(include = 'all').to_latex(position = "hc")

#+end_src

#+RESULTS:
:results:
\begin{table}[hc]
\centering
\begin{tabular}{lrr}
\toprule
{} &    x\_tau &    x\_tsf \\
\midrule
count & 5.79E+02 & 5.79E+02 \\
mean  & 2.54E+00 & 1.85E+00 \\
std   & 9.57E-01 & 1.48E+00 \\
min   & 4.07E-01 & 5.59E-04 \\
25\%   & 1.87E+00 & 5.65E-01 \\
50\%   & 2.44E+00 & 1.60E+00 \\
75\%   & 3.08E+00 & 2.99E+00 \\
max   & 5.77E+00 & 6.47E+00 \\
\bottomrule
\end{tabular}
\end{table}
:end:

#+begin_src python

fname="figs/Comparing_the_x_Mt"

plt.scatter(data = dtau, y = "x_tau", x = "Mt", label=r"$\tau$=3.5 Gyr")
plt.scatter(data = dts, y = "x_tsf", x = "Mt",alpha=0.5,label="$t_{sf}$=12.5 Gyr")

plt.xscale('log')
plt.yscale('log')
plt.ylabel('x')
plt.xlabel('Mt')
plt.legend(loc='upper right')
plt.grid()
plt.savefig(fname)
plt.close()
caption(fname,"Comparing the two x's, According to their total masses")
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two x's, According to their total masses
#+label: fig:Comparing the two x's, According to their total masses
#+caption:Comparing the two x's, According to their total masses
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/Comparing_the_x_Mt.png]]
:end:
#+begin_src python

fname="figs/x_tau-Mt-color"

dtau.plot.scatter(x = "Mt",y = "x_tau", c = "color")
plt.xscale('log')
plt.yscale('log')
plt.grid()
plt.savefig(fname)
plt.close()
caption(fname,r"$x|_\tau=f(M_t)$, with their color index")
#+end_src

#+RESULTS:
:results:
#+name: fig:$x|_\tau=f(M_t)$, with their color index
#+label: fig:$x|_\tau=f(M_t)$, with their color index
#+caption:$x|_\tau=f(M_t)$, with their color index
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x_tau-Mt-color.png]]
:end:

#+begin_src python :results none
x_comp=simple_regplot(dp,'x_tsf','x_tau',cap = "Comparing the two x")
x_comp_Mt=simple_regplot(dp,'x_tsf','x_tau',scatter_kws={"c":dp["logMt"]},cap = "Comparing the two x, according to their total mass")
x_comp_tt=simple_regplot(dp,'x_tsf','x_tau',scatter_kws={"c":dp["TType"]},cap = "Comparing the two x, according to their type")
x_comp_col=simple_regplot(dp,'x_tsf','x_tau',scatter_kws={"c":dp["color"]},cap = "Comparing the two x, according to their color index")
#+end_src

#+begin_src python
x_comp_Mt[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two x, according to their total mass
#+caption:Comparing the two x, according to their total mass
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x_tsf-x_tau-color_logMt.png]]
:end:

#+begin_src python
x_comp_tt[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two x, according to their type
#+caption:Comparing the two x, according to their type
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x_tsf-x_tau-color_TType.png]]
:end:

#+begin_src python
x_comp_col[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two x, according to their color index
#+caption:Comparing the two x, according to their color index
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/x_tsf-x_tau-color_color.png]]
:end:

The two results are interrelated through the equation:
#+begin_src python
eq_ols(r"x|_\tau", "x|_{tsf}" , x_comp)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:x_tsf-x_tau}
\begin{align}
& x|_\tau = (6.30(6) \times 10^{-1})\cdot x|_{tsf} + (1.374(15) \times 10^{0}) \\
& \textrm{with correlation } R^2=94\%
\end{align}
\end{equation}
\noindent
:end:

and from the plots the following conclusions can be drawn:

1. The galaxies with a higher total mass deviate less from the linear fit and are older.
1. The younger galaxies are mainly later types of galaxies
1. For lower x's, the galaxies have a lower color index which indicates that they are younger. So the values are inline with the experimental values.

*** Comparing the normalization constants

#+begin_src  python 
#Comparing the 2 results
fname="figs/Comparing_the_A_x"
plt.scatter(data = dtau, x = "x_tau", y = "A_tau", label=r"$\tau$=3.5 Gyr")
plt.scatter(data = dts, x = "x_tsf", y = "A_tsf",alpha=0.5,label="$t_{sf}$=12.5 Gyr")
plt.xscale('log')
plt.yscale('log')
plt.xlabel('x')
plt.ylabel('A_del')
plt.legend(loc='upper right')
plt.grid()
plt.savefig(fname)
plt.close()
caption(fname,"Comparing the two A_{del}")
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two A_{del}
#+label: fig:Comparing the two A_{del}
#+caption:Comparing the two A_{del}
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/Comparing_the_A_x.png]]
:end:


#+begin_src python
fname = "figs/A_tau-A_tsf_colo_X"
dp.plot.scatter(x = "A_tsf",
                y = "A_tau",
                c = "x_tsf", grid = True)
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()
caption(fname, "Comparison of the 2 A_{del}s according to their $x$")

#+end_src

#+RESULTS:
:results:
#+name: fig:Comparison of the 2 A_{del}s according to their $x$
#+label: fig:Comparison of the 2 A_{del}s according to their $x$
#+caption:Comparison of the 2 A_{del}s according to their $x$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/A_tau-A_tsf_colo_X.png]]
:end:
#+begin_src python
fname = "figs/A_tau-A_tsf_Mt"
dp.plot.scatter(x = "A_tsf",
                y = "A_tau",
                c = "logMt", grid = True)
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()
caption(fname, "Comparison of the 2 A_{del}s according to their total masses")

#+end_src

#+RESULTS:
:results:
#+name: fig:Comparison of the 2 A_{del}s according to their total masses
#+label: fig:Comparison of the 2 A_{del}s according to their total masses
#+caption:Comparison of the 2 A_{del}s according to their total masses
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/A_tau-A_tsf_Mt.png]]
:end:

For high $x$ and high masses the two A_{del}s have a high correlation. Specifically:
1. For high $x$ the $A_{del}|_{\tau}-A_{del}|_{t_{sf}}$ plot follows a $y=x$ trend, which means that for older stars and stars with a low star formation timescale $\tau$, the normalization constant is the same despite the method used to calculate it.
1. The same is true for more massive galaxies, since they deviate less from the $y=x$ line

*** Trying to make the A_{del} cloud more compact

Having found $x|_{t_sf}$ and $x|_{\tau}$ we can find a relation between these two values

#+begin_src python
dcl = dp.copy()

fname = "figs/A_tau-A_tsf_Mt"
dp.plot.scatter(x = "A_tsf",
                y = "A_tau",
                c = "logMt", grid = True)
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()
caption(fname, "Comparison of the 2 A_{del}s according to their total masses")


#+end_src

#+RESULTS:
:results:
#+name: fig:Comparison of the 2 A_{del}s according to their total masses
#+label: fig:Comparison of the 2 A_{del}s according to their total masses
#+caption:Comparison of the 2 A_{del}s according to their total masses
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/A_tau-A_tsf_Mt.png]]
:end:


** Int SFR to find the A_del

If we integrate equation (\ref{eq:SFR}) we get:


\begin{equation}\label{eq:int SFR}
\begin{align}
\int^{t_{sf}}_0 SFR_{del} dt_{sf}&=\int^{t_{sf}}_0 \frac{A_{del}t_{sf}e^{-t_{sf}/\tau}}{\tau^2} dt_{sf}\\
\zeta\cdot M_*&=-A_{del} \frac{{\left(t_{\mathit{sf}} \tau + \tau^{2}\right)} e^{\left(-\frac{t_{\mathit{sf}}}{\tau}\right)}}{\tau^{2}}+A_{del}\\
\zeta\cdot M_*&=-A_{del}\frac{\tau^2(x+1)e^{-x}}{\tau^2}+A_{del}\\
\zeta\cdot M_*& = A_{del}(1-(x+1)e^{-x})\\
A_{del}&=\zeta\cdot M_*\frac{e^x}{e^x-x-1}
\end{align}
\end{equation}

The integral $\int SFR dt=$ The total mass that is turned into stars. But during the evolution of the stars, the stars spew mass to Interstellar space, so the galaxies lose mass during this process. So the observed Stellar Mass M_* is smaller than the total mass turned into Stellar Mass.

The constant $\zeta$ accommodates for this mass-loss and, as discussed earlier, we can assume a conservative value of 1.3 for the galaxies in the LCV.

#+begin_src python
dcl['const_tsf']=np.exp(dcl.x_tsf)/(np.exp(dcl.x_tsf)-dcl.x_tsf-1)
dcl['const_tau']=np.exp(dcl.x_tau)/(np.exp(dcl.x_tau)-dcl.x_tsf-1)
dcl['A_theor_tsf']=dcl['StellarMass']*dcl.const_tsf
dcl['A_theor_tau']=dcl['StellarMass']*dcl.const_tau
dcl["log_A_theor_tsf"]=np.log10(dcl["A_theor_tsf"])
dcl["log_A_theor_tau"]=np.log10(dcl["A_theor_tau"])

fname = "figs/A_theor_tau-M*"
dcl.plot.scatter(x = "A_theor_tsf",
                y = "A_theor_tau",
                c = "x_tau",
                grid = True)
plt.xscale('log')
plt.yscale('log')
plt.savefig(fname)
plt.close()
caption(fname, "Comparison of the 2 A_{del}s according to their total masses")
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparison of the 2 A_{del}s according to their total masses
#+label: fig:Comparison of the 2 A_{del}s according to their total masses
#+caption:Comparison of the 2 A_{del}s according to their total masses
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/A_theor_tau-M*.png]]
:end:

#+begin_src python
A_theor_tau_StellarMass_log=simple_regplot(dcl,"log_A_theor_tau","logStellarMass",scatter_kws={"c":dcl["x_tsf"]}, cap = r"Comparison of the A_del according to their Stellar Mass")
A_theor_tau_StellarMass_log[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparison of the A_del according to their Stellar Mass
#+caption:Comparison of the A_del according to their Stellar Mass
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_A_theor_tau-logStellarMass-color_x_tsf.png]]
:end:

#+begin_src python
A_theor_A_exp_tau=simple_regplot(dcl,"log_A_theor_tau","log_A_tau",scatter_kws={"c":dcl["x_tsf"]}, cap = r"Comparison of the 2 $A_{del}|_{\tau=const.}$s (theoretical and experimental)", name = "A_theor_A_exp_tau")
A_theor_A_exp_tau[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:A_theor_A_exp_tau
#+caption:Comparison of the 2 $A_{del}|_{\tau=const.}$s (theoretical and experimental)
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_A_theor_tau-log_A_tau-color_x_tsf.png]]
:end:

#+begin_src python
A_theor_A_exp_tsf=simple_regplot(dcl,"log_A_theor_tsf","log_A_tsf",scatter_kws={"c":dcl["x_tsf"]}, cap = r"Comparison of the 2 $A_{del}|_{tsf=const.}$s (theoretical and experimental)", name = "A_theor_A_exp_tsf")
A_theor_A_exp_tsf[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:A_theor_A_exp_tsf
#+caption:Comparison of the 2 $A_{del}|_{tsf=const.}$s (theoretical and experimental)
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_A_theor_tsf-log_A_tsf-color_x_tsf.png]]
:end:


From the plots \cite{fig:A_theor_A_exp_tau} and \cite{fig:A_theor_A_exp_tsf} we get correlations of src_python{inline_r2(A_theor_A_exp_tau)} {{{results($R^2 = 91\%$ \noindent)}}} and src_python{inline_ols("A_{tsf}","A_{tsf,theor}",A_theor_A_exp_tau)} {{{results($A_{tsf} = (8.97(12) \times 10^{-1})\cdot A_{tsf\,theor} + (1.02(10) \times 10^{0})$)}}}  so the theoretical values fit the experimental.

From the equations (\ref{eq:SFR}), (\ref{eq:av_SFR-x}) and (\ref{eq:int SFR}), the $SFR_{0,del}$ and the $\overline{SFR_{del}}$ are given by the equations:

\begin{equation} \label{eq:SFR final}
\begin{align}
SFR_{0,del}&=\zeta M_*\frac{e^x}{e^x-x-1}\frac{xe^{-x}}{\tau}\\
          &=\zeta M_*\frac{x}{\tau(e^x-x-1)}
\end{align}
\end{equation}


\begin{equation}\label{eq:av_SFR-x final}
\begin{align}
\overline{SFR_{del}}&=\zeta M_*\frac{e^x}{e^x-x-1}\frac{1}{t_{sf}}[1-(1+x)e^{-x}]\\
                   &=\zeta M_*\frac{e^x}{e^x-x-1}\frac{1}{t_{sf}}\frac{e^x-x-1}{e^x}\\
                   &=\zeta \frac{M_*}{t_{sf}}
\end{align}
\end{equation}

The new $\overline{SFR_{del}}$ is the same with the $\overline{SFR}$ of the equation (\ref{eq:av_SFR M*}).

#+begin_src python
t = np.linspace(0.1, 5, 900)
fname = "figs/SFR_avSFR"

plt.plot(t, t/(np.exp(t)-t-1), label = "$SFR_{0,del}$")
plt.plot(t, 1/t, label = "$\overline{SFR_{del}}$")
plt.legend(loc ="upper right")
plt.grid()
plt.xlabel("$t_{sf}$")
plt.ylabel("$SFR$")
plt.savefig(fname)
plt.close()

caption(fname, r"The $SFR_{0,del}$ and $\overline{SFR_{del}}$ for constant $\tau=1$ and $\zeta M_*=1$")
#+end_src

#+RESULTS:
:results:
#+name: fig:The $SFR_{0,del}$ and $\overline{SFR_{del}}$ for constant $\tau=1$ and $\zeta M_*=1$
#+label: fig:The $SFR_{0,del}$ and $\overline{SFR_{del}}$ for constant $\tau=1$ and $\zeta M_*=1$
#+caption:The $SFR_{0,del}$ and $\overline{SFR_{del}}$ for constant $\tau=1$ and $\zeta M_*=1$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/SFR_avSFR.png]]
:end:



** Calculating the $t_{sf}$ and $\tau$ for each galaxy

Having found an expression for the $A_{del}$, we have eliminated on out of the 3 variables and now the $t_{sf}$ and $\tau$ of each galaxy can be calcuated.

#+begin_src python :exports none
dsol = df.copy()
dsol.SFR_0.describe()
#+end_src

#+RESULTS:
:results:
count   5.79E+02
mean    1.54E-01
std     4.48E-01
min     1.02E-03
25%     3.67E-03
50%     1.28E-02
75%     6.91E-02
max     4.39E+00
Name: SFR_0, dtype: float64
:end:

#+begin_src python
def positive_constraint(vars):
    x = max(1e-11, vars[0])  # Ensures x is positive or zero
    y = max(1e-11, vars[1])  # Ensures y is positive or zero
    return x, y
def solved(var):

    cons = positive_constraint(var)
    tsf = cons[0]
    tau = cons[1]
    x = tsf/tau

    SFR=dsol.loc[i]["SFR_0"]
    Mstellar=dsol.loc[i]["StellarMass"]

    A = zeta*Mstellar*np.exp(x)/(np.exp(x)-(x)-1)

    f = np.zeros(2)

    #####################################################
    # f[0] = tau*SFR-A*x*np.exp(-x)                     #
    # f[1] = tsf*(np.exp(x)-x-1)*SFR-zeta*Mstellar*x**2 #
    #####################################################

    f[0] = SFR*tau*np.exp(x)-A*x
    f[1] = zeta*Mstellar*x**2/tsf/SFR-(np.exp(x)-x-1)
    return f

for i in dsol.index:

    #for i in dts.index:
    z = fsolve(solved,[9.6*10**9,3.5*10**9])
    dsol.at[i,'tsf']=z[0]
    dsol.at[i,'tau']=z[1]

dsol["x"]=dsol.tsf/dsol.tau

#+end_src

#+RESULTS:
:results:
:end:
#+begin_src python
def solved2(var):

    cons = positive_constraint(var)
    tsf = cons[0]
    tau = cons[1]
    x = tsf/tau

    SFR=dsol.loc[i]["SFR_0"]
    Mstellar=dsol.loc[i]["StellarMass"]

    A = zeta*Mstellar*np.exp(x)/(np.exp(x)-(x)-1)

    f = np.zeros(2)

    f[0] = tau*SFR-A*x*np.exp(-x)
    f[1] = tsf*(np.exp(x)-x-1)*SFR-zeta*Mstellar*x**2

    #####################################################
    # f[0] = SFR*tau*np.exp(x)-A*x                      #
    # f[1] = zeta*Mstellar*x**2/tsf/SFR-(np.exp(x)-x-1) #
    #####################################################
    return f

for i in dsol.index:

    #for i in dts.index:
    z = fsolve(solved2,[9.6*10**9,3.5*10**9])
    dsol.at[i,'tsf2']=z[0]
    dsol.at[i,'tau2']=z[1]

dsol["x2"]=dsol.tsf2/dsol.tau2

#+end_src

#+RESULTS:
:results:
:end:

#+begin_src python
dsol['tsfG'] = dsol.tsf/10**9
dsol['tauG'] = dsol.tau/10**9

fname = "figs/tsf-hist"
plt.hist(dsol["tsfG"],range=[0,20], bins =20)
plt.grid(True)
plt.xlabel("$t_{sf}$")
plt.ylabel("Number of Galaxies")
plt.savefig(fname)
plt.close()

caption(fname, "Histogram of t_{sf} from 0 to 20 Gyr")

#+end_src

#+RESULTS:
:results:
#+name: fig:Histogram of t_{sf} from 0 to 20 Gyr
#+label: fig:Histogram of t_{sf} from 0 to 20 Gyr
#+caption:Histogram of t_{sf} from 0 to 20 Gyr
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/tsf-hist.png]]
:end:

#+begin_src python
dsol[["tsfG","tauG","x"]].describe(include='all').round(3).to_markdown(tablefmt= "orgtbl")
#+end_src

#+RESULTS:
:results:
|       |   tsfG |   tauG |     x |
|-------+--------+--------+-------|
| count |    579 |    579 |   579 |
| mean  |  9.047 |  3.429 | 2.548 |
| std   |  4.637 |  1.197 | 0.849 |
| min   |  1.307 |  1.262 | 0.642 |
| 25%   |  6.066 |  2.954 |  1.99 |
| 50%   |  8.238 |  3.297 | 2.467 |
| 75%   | 11.007 |  3.691 | 2.962 |
| max   | 62.635 | 27.605 | 9.487 |
:end:

#+begin_src python
dsol['tsfG2'] = dsol.tsf2/10**9
dsol['tauG2'] = dsol.tau2/10**9
dsol[["tsfG2","tauG2", "x2"]].describe(include='all').round(3).to_markdown(tablefmt= "orgtbl")
#+end_src

#+RESULTS:
:results:
|       |   tsfG2 |   tauG2 |    x2 |
|-------+---------+---------+-------|
| count |     579 |     579 |   579 |
| mean  |  27.005 |   9.848 | 2.743 |
| std   | 112.566 |  41.066 |     0 |
| min   |   0.523 |   0.191 | 2.738 |
| 25%   |   4.329 |   1.578 | 2.743 |
| 50%   |   7.345 |   2.678 | 2.743 |
| 75%   |  14.071 |    5.13 | 2.743 |
| max   | 1439.37 | 525.624 | 2.743 |
:end:
#+begin_src python
fname = "figs/tsf2-hist"
plt.hist(dsol["tsfG2"],range=[0,20], bins =20)
plt.grid(True)
plt.xlabel("$t_{sf}$")
plt.ylabel("Number of Galaxies")
plt.savefig(fname)
plt.close()

caption(fname, "Histogram of t_{sf} from 0 to 20 Gyr")

#+end_src

#+RESULTS:
:results:
#+name: fig:Histogram of t_{sf} from 0 to 20 Gyr
#+label: fig:Histogram of t_{sf} from 0 to 20 Gyr
#+caption:Histogram of t_{sf} from 0 to 20 Gyr
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/tsf2-hist.png]]
:end:

#+begin_src python
fname = "figs/tsf_tsf2"
m = 1
for i in ["tsfG","tsfG2"]:
    plt.scatter(dsol[i], dsol["color"], label = "Method {}".format(m) )
    m=m+1
plt.xscale("log")
plt.xlabel(r"$t_{sf}$ Gyr")
plt.ylabel("Color index")
plt.legend(loc = "upper right")
plt.grid()
plt.savefig(fname)
plt.close()

caption(fname, r"Comparing the two $t_{sf}$")
#+end_src

#+RESULTS:
:results:
#+name: fig:Comparing the two $t_{sf}$
#+label: fig:Comparing the two $t_{sf}$
#+caption:Comparing the two $t_{sf}$
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/tsf_tsf2.png]]
:end:



*** [?]
+ Can we calculate/observe $\zeta$?
  + If not: for galaxies with extreme star-bursting and low-metallicity galaxies $\zeta=2-3$. Can we find those galaxies and approximate the $\zeta$?
+ Why couldn't we use (\ref{eq:av_SFR M*}) to calculate $A_{del}$
+ While in the second method we see a better correlation between the age of the galaxy and the color index, we must have an older universe

* The gas depletion timescale $\tau_g$ \label{SEC:tau_g}

The gas depletion timescale $\tau_g$ measures the time taken by a galaxy to exhaust its gas content Mg given the current SFR[cite:@nageshSimulationsStarformingMainsequence2023; @pflamm-altenburgFundamentalGasDepletion2009].
\begin{equation}\label{eq:tau_g}
\tau_g=\frac{M_g}{\dot{M_*}}=\frac{M_g}{SFR}
\end{equation}

#+begin_src python :results none
cols_to_use = dp.columns.difference(df.columns)
dtg = pd.merge(df, dp[cols_to_use], left_index=True, right_index=True, how='outer')

dtg["tau_g"]=df["Mg"]/df["SFR_0"]
dtg["log_tau_g"]=np.log10(dtg["tau_g"])

#+end_src


#+begin_src python
fname = "figs/tau_g-Mg-color_SFR"
dtg.plot(kind="scatter",x="Mg",y="tau_g", c = 'log_SFR_0')
plt.xscale('log')
plt.yscale('log')
plt.grid()
plt.title(r"$\tau_g=f(M_g$), with color= SFR")
plt.savefig(fname)
plt.close()
taug_cap = "[[./{}.png]]".format(fname)


taug_SFR_Mg=simple_regplot(dtg,"log_SFR_0","log_tau_g",scatter_kws={"c":dtg["logMg"]}, cap = r"Correlation of the $\tau_g$ with the SFR and the gas mass")
taug_cap + "\n" + taug_SFR_Mg[1]
#+end_src

#+RESULTS:
:results:
[[./figs/tau_g-Mg-color_SFR.png]]
#+name: fig:Correlation of the $\tau_g$ with the SFR and the gas mass
#+caption:Correlation of the $\tau_g$ with the SFR and the gas mass
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_SFR_0-log_tau_g-color_logMg.png]]
:end:

Despite a weak logarithmic correlation (as indicated by src_python{inline_r2(taug_SFR_Mg)} {{{results($R^2 = 32\%$ \noindent)}}}), there is a noticeable trend of decreasing $\tau_g$ with increasing SFR and $M_g$.

#+begin_src python

taug_StellarMass=simple_regplot(dtg,"logStellarMass","log_tau_g",scatter_kws={"c":dtg["log_tau"]}, cap = r"Correlation of the $\tau_g$ with the SFR and the Stellar mass")
taug_StellarMass[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Correlation of the $\tau_g$ with the SFR and the Stellar mass
#+caption:Correlation of the $\tau_g$ with the SFR and the Stellar mass
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logStellarMass-log_tau_g-color_log_tau.png]]
:end:

The logarithmic correlation between $\tau_g-M_*$ is low (src_python{inline_r2(taug_StellarMass)} {{{results($R^2 = 21\%$ \noindent)}}}), there seems to be a pattern wherein the decrease of $\tau_g$ corresponds to an increase in the values of the Stellar Mass, but there does not seem to be one for $\tau_g-\tau$

#+begin_src python

taug_Mt=simple_regplot(dtg,"logMt","log_tau_g",scatter_kws={"c":dtg["log_tsf"]}, cap = r"Correlation of the $\tau_g$ with the total mass and the mass of the gas")
taug_Mt[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Correlation of the $\tau_g$ with the total mass and the mass of the gas
#+caption:Correlation of the $\tau_g$ with the total mass and the mass of the gas
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMt-log_tau_g-color_log_tsf.png]]
:end:

#+begin_src python

taug_color=simple_regplot(dtg,"color","log_tau_g",scatter_kws={"c":dtg["log_Mass_ratio"]}, cap = r"Correlation of the $\tau_g$ with the color index")
taug_color[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Correlation of the $\tau_g$ with the color index
#+caption:Correlation of the $\tau_g$ with the color index
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/color-log_tau_g-color_log_Mass_ratio.png]]
:end:

#+begin_src python

taug_tsf=simple_regplot(dtg,"log_tsf","log_tau_g",scatter_kws={"c":dtg["log_tau"]}, cap = r"Correlation of the $\tau_g$ with the color index")
taug_tsf[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:Correlation of the $\tau_g$ with the color index
#+caption:Correlation of the $\tau_g$ with the color index
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_tsf-log_tau_g-color_log_tau.png]]
:end:


Again it can be observed that as the $\tau_g$ decreases, the corresponding values of $M_t$ increase, but the logarithmic correlation is again low (src_python{inline_r2(taug_Mt)} {{{results($R^2 = 11\%$ \noindent)}}}), and there is no clear correlation between $\tau_g-t_{sf}$

There is a notable trend, wherein for high masses we have a shorter timescale.

* Mass relations

Many of the galaxies masses have a high correlation with each other, and also help us understand the previous calculations.

#+begin_src python :results none
cols_to_use = dtg.columns.difference(df.columns)
dm = pd.merge(df, dtg[cols_to_use], left_index=True, right_index=True, how='outer')

#+end_src


#+begin_src python
nam = "mg_SMass"
cap = "Gas Mass-Stellar Mass plot"
mg_SMass = simple_regplot(dm,"logMg","logStellarMass",cap=cap, name = nam)
mg_SMass_tg = simple_regplot(dm,"logMg","logStellarMass",scatter_kws={"c": dm["log_tau_g"]},cap=cap, name = nam)
mg_SMass_color = simple_regplot(dm,"logMg","logStellarMass",scatter_kws={"c": dm["color"]},cap=cap, name = nam)
mg_SMass_color[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:mg_SMass
#+caption:Gas Mass-Stellar Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMg-logStellarMass-color_color.png]]
:end:

For the plot [[fig:mg_SMass]]:
#+begin_src python

eq_ols("$M_g$","$M_*$", mg_SMass)

#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logMg-logStellarMass}
\begin{align}
& $M_g$ = (1.098(35) \times 10^{0})\cdot $M_*$ + (-7.9(2.9) \times 10^{-1}) \\
& \textrm{with correlation } R^2=64\%
\end{align}
\end{equation}
\noindent
:end:

#+begin_src python
nam = "SMass_m26"
cap = "Mass inside the Holmberg radius-Stellar Mass plot"
SMass_m26 = simple_regplot(dm,"logStellarMass","logM26",cap=cap, name = nam)
SMass_m26_tg = simple_regplot(dm,"logStellarMass","logM26",scatter_kws={"c": dm["log_tau_g"]},cap=cap, name = nam)
SMass_m26_tg[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:SMass_m26
#+caption:Mass inside the Holmberg radius-Stellar Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logStellarMass-logM26-color_log_tau_g.png]]
:end:

For the plot [[fig:SMass_m26]]:

#+begin_src python
eq_ols("M26", "M*",SMass_m26)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logStellarMass-logM26}
\begin{align}
& M26 = (1.076(23) \times 10^{0})\cdot M* + (-1.8(1.9) \times 10^{-1}) \\
& \textrm{with correlation } R^2=80\%
\end{align}
\end{equation}
\noindent
:end:

#+begin_src python
nam = "mg_m26"
cap = "Mass inside the Holmberg radius-Gas Mass plot"
mg_m26 = simple_regplot(dm,"logMg","logM26",cap = cap, name = nam)
mg_m26[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:mg_m26
#+caption:Mass inside the Holmberg radius-Gas Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMg-logM26.png]]
:end:

For the plot [[fig:mg_m26]]:

#+begin_src python
eq_ols("M26", "Mg",mg_m26)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logMg-logM26}
\begin{align}
& M26 = (1.41(4) \times 10^{0})\cdot Mg + (-2.92(30) \times 10^{0}) \\
& \textrm{with correlation } R^2=74\%
\end{align}
\end{equation}
\noindent
:end:

#+begin_src python
cap = "Stellar Mass-Total Mass plot"
nam = "SMass_mt"
SMass_mt = simple_regplot(dm,"logStellarMass","logMt",cap = cap, name = nam)
SMass_mt_tg = simple_regplot(dm,"logStellarMass","logMt",scatter_kws = {"c": dm["log_tau_g"]},cap = cap, name = nam)
SMass_mt_SFR = simple_regplot(dm,"logStellarMass","logMt",scatter_kws = {"c": dm["log_SFR_0"]},cap = cap, name = nam)
SMass_mt_mg = simple_regplot(dm,"logStellarMass","logMt",scatter_kws = {"c": dm["logMg"]},cap = cap, name = nam)
SMass_mt_ratio = simple_regplot(dm,"logStellarMass","logMt",scatter_kws = {"c": dm["log_Mass_ratio"]},cap = cap, name = nam)
SMass_mt_color = simple_regplot(dm,"logStellarMass","logMt",scatter_kws = {"c": dm["color"]},cap = cap, name = nam)
SMass_mt_SFR[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:SMass_mt
#+caption:Stellar Mass-Total Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logStellarMass-logMt-color_log_SFR_0.png]]
:end:

For the plot [[fig:SMass_mt]]:
#+begin_src python
eq_ols('$M_t$',"$M_*$", SMass_mt )
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logStellarMass-logMt}
\begin{align}
& $M_t$ = (8.41(9) \times 10^{-1})\cdot $M_*$ + (1.69(8) \times 10^{0}) \\
& \textrm{with correlation } R^2=94\%
\end{align}
\end{equation}
\noindent
:end:


#+begin_src python
cap = "Total Mass - Gas Mass plot"
nam = "mg_mt"
mg_mt = simple_regplot(dm,"logMg","logMt",scatter_kws = {"c":dm['log_SFR_0']},cap = cap, name = nam)
mg_mt_SFR = simple_regplot(dm,"logMg","logMt",scatter_kws = {"c":dm['log_SFR_0']},cap = cap, name = nam)
mg_mt_tg = simple_regplot(dm,"logMg","logMt",scatter_kws = {"c":dm['log_tau_g']},cap = cap, name = nam)
mg_mt_SMass = simple_regplot(dm,"logMg","logMt",scatter_kws = {"c":dm['logStellarMass']},cap = cap, name = nam)
mg_mt_SFR[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:mg_mt
#+caption:Total Mass - Gas Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMg-logMt-color_log_SFR_0.png]]
:end:

For the plot [[fig:mg_mt]]:
#+begin_src python
eq_ols('$M_t$',"$M_g$", mg_mt )
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logMg-logMt-color_log_SFR_0}
\begin{align}
& $M_t$ = (1.065(23) \times 10^{0})\cdot $M_g$ + (-1.5(1.9) \times 10^{-1}) \\
& \textrm{with correlation } R^2=81\%
\end{align}
\end{equation}
\noindent
:end:

#+begin_src python :results none
cap = "Mass inside the Holmberg radius-Total Mass plot"
nam = "m26_mt"
m26_mt = simple_regplot(dm,"logM26","logMt",cap = cap, name = nam)

#+end_src

#+begin_src python
m26_mt[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:m26_mt
#+caption:Mass inside the Holmberg radius-Total Mass plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logM26-logMt.png]]
:end:

#+begin_src python
eq_ols("M26", "$M_t$", m26_mt)
#+end_src

#+RESULTS:
:results:
\begin{equation}\label{eq:logM26-logMt}
\begin{align}
& M26 = (6.64(12) \times 10^{-1})\cdot $M_t$ + (2.85(11) \times 10^{0}) \\
& \textrm{with correlation } R^2=85\%
\end{align}
\end{equation}
\noindent
:end:


There are many plots exhibiting a correlation of $R^2>80%$, indicating that we can utilize those functions to estimate the masses of the galaxies in the LCV with a high degree of confidence.

The $M_t-M_*$ (\ref{fig:SMass_mt}) plot is particularly noteworthy, displaying a correlation  of src_python{inline_r2(SMass_mt)} {{{results($R^2 = 94\%$ \noindent)}}}. This plot also indicates that galaxies with greater total and stellar masses tend to have higher SFR, consistent with the findings in section \ref{SEC:tau_g} where $\tau_g$ decreases with increasing masses.

This phenomenon is likely due to the fact that galaxies with higher masses possess greater potential energy, which accelerates the star formation process. The galaxies with a high Mass ratio $M_r$ could also help the process due to their dense regions and the resulting strong local gravitational potential.


#+begin_src python
cap = r"$\t_{sf}$-Mass ratio $\left(\frac{M_*}{M_g}\right)$ plot"
nam = "tsf_mr"
tsf_mr = simple_regplot(dm,"log_tsf","log_Mass_ratio",scatter_kws={"c": dm["color"]},cap = cap, name = nam)
tsf_mr[1]

#+end_src

#+RESULTS:
:results:
#+name: fig:tsf_mr
#+caption:$\t_{sf}$-Mass ratio $\left(\frac{M_*}{M_g}\right)$ plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_tsf-log_Mass_ratio-color_color.png]]
:end:


#+begin_src python
col_Mr = simple_regplot(dm,"color","log_Mass_ratio", scatter_kws={"c":dm["logMt"]}, cap = r"Mass ratio $\frac{M_*}{M_g}$-Color index plot", name = "col_Mr")
col_Mr[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:col_Mr
#+caption:Mass ratio $\frac{M_*}{M_g}$-Color index plot
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/color-log_Mass_ratio-color_logMt.png]]
:end:

From the \ref{fig:col_Mr}, we conclude that when the color index is higher the Mass ratio decreases, which is to be expected, since the higher the B-FUV the more active the star formation of the galaxy.



* Variations in Star Formation Rate Across the Different Masses


#+begin_src python :results none
######### SFR ##########

SFR_SMass_tg = simple_regplot(dm, "log_SFR_0", "logStellarMass", scatter_kws = {"c":dm["log_tau_g"]})

SFR_tg_SMass = simple_regplot(dm, "log_SFR_0", "log_tau_g", scatter_kws = {"c":dm["logStellarMass"]})

SFR_Mg_tg = simple_regplot(dm, "log_SFR_0", "logMg", scatter_kws = {"c":dm["log_tau_g"]})

SFR_Mt_tg = simple_regplot(dm, "logMt", "log_SFR_0", scatter_kws = {"c":dm["log_tau_g"]})
#+end_src


#+begin_src python
SFR_col = simple_regplot(dm, "log_SFR_0", "color")
SFR_col[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:None
#+caption:None
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_SFR_0-color.png]]
:end:

#+begin_src python
SFR_SMass_tg[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:None
#+caption:None
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_SFR_0-logStellarMass-color_log_tau_g.png]]
:end:


#+begin_src python
SFR_tg_SMass[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:None
#+caption:None
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/log_SFR_0-log_tau_g-color_logStellarMass.png]]
:end:
#+begin_src python
SFR_Mt_tg[1]
#+end_src

#+RESULTS:
:results:
#+name: fig:None
#+caption:None
#+ATTR_LaTeX: :placement [!htpb]
[[./figs/logMt-log_SFR_0-color_log_tau_g.png]]
:end:
#+begin_src python
simple_regplot(dm, "logMt", "log_tau", scatter_kws = {"c":dm["log_tau_g"]})
#+end_src

#+RESULTS:
:results:
(<statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7fae4452b010>, '#+name: fig:None \n#+caption:None\n#+ATTR_LaTeX: :placement [!htpb] \n[[./figs/logMt-log_tau-color_log_tau_g.png]]', 'logMt-log_tau-color_log_tau_g')
:end:

#+begin_src python
simple_regplot(dm, "logMt", "log_tsf", scatter_kws = {"c":dm["log_tau_g"]})
#+end_src

#+RESULTS:
:results:
(<statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7fae35b56ad0>, '#+name: fig:None \n#+caption:None\n#+ATTR_LaTeX: :placement [!htpb] \n[[./figs/logMt-log_tsf-color_log_tau_g.png]]', 'logMt-log_tsf-color_log_tau_g')
:end:

** TODO  put that tau and tsf dont have a correlation with Mt

\pagebreak
#+print_bibliography:
* Footnotes
[fn:2] We use the FUV and B measurments to calculate the <FUV-B> color index.

[fn:1] TType=Morphology type code according to the classification by de Vaucouleurs/ Tdw1=Dwarf galaxy morphology/ Tdw2=Dwarf galaxy surface brightness morphology

