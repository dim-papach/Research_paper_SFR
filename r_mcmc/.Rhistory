# Run the R scripts in the R/ folder with your custom functions:
tar_source()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes) # Load other packages as needed.
library(stantargets)
library(crew)
library(future)
# Run the R scripts in the R/ folder with your custom functions:
tar_source()
install.packages("microbenchmark")
# Run the R scripts in the R/ folder with your custom functions:
tar_source()
install.packages("rstanarm")
tar_visnetwork()
setwd("~/Documents/Research_paper_SFR/r_mcmc")
setwd("~/Documents/Research_paper_SFR/r_mcmc")
tar_visnetwork()
sury <- tar_read(stan_fit_summary_x)
sury
sury[, "Rhat"]
sury[, "rhat"]
summary(sury[, "rhat"])
traceplot(fit, pars = c("t_sf[1]", "tau[1]", "zeta[1]"))
sury[, "rhat"]
traceplot(fit, pars = c("t_sf[1]", "tau[1]", "zeta[1]"))
rstan::traceplot(fit, pars = c("t_sf[1]", "tau[1]", "zeta[1]"))
rstan::traceplot(sury, pars = c("t_sf[1]", "tau[1]", "zeta[1]"))
rstan::traceplot(sury, pars = c("t_sf[1]", "tau[1]", "zeta[1]"))
library(targets)
tar_load_globals()
tar_make()
diffs = tar_load(sfr_diff)
diff
diffs = tar_read(sfr_diff)
diffs$flag
sum(sfr_diff$flag == "Keep")
sum(sfr_diff$flag == "Discard")
default_colors <- scales::hue_pal()(2)
# Create a scatter plot of logSFR_pred vs logSFR_total
ggplot(sfr_diff, aes(y = logSFR_pred, x = logSFR_total, color = flag)) +
geom_point(size = 0.9) +
# Error bar for x based on _sigma
geom_errorbar(
aes(
ymin = logSFR_pred - logSFR_pred_sigma,
ymax = logSFR_pred + logSFR_pred_sigma
),
width = 0.1
) +
# legend for keep and discard = "Kept data", "Discarded data"+ the number of points for eac
scale_color_manual(
name = "Data Flag", # Legend title
values = c("Keep" = "blue", "Discard" = "red"),
labels = c(
paste("Kept data (n =", sum(sfr_diff$flag == "Keep"), ")"),
paste("Discarded data (n =", sum(sfr_diff$flag == "Discard"), ")")
)
) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
xlim(-8, 1) +
labs(
title = TeX("Comparison of $log_{10}SFR_{pred}$ and $log_{10}SFR_{obs}$"),
x = TeX("$log_{10}\\left[\\frac{SFR_{obs}}{M_o/yr} \\right]$"),
y = TeX("$log_{10}\\left[\\frac{SFR_{pred}}{M_o/yr} \\right]$")
) +
ggeasy::easy_center_title() +
ggeasy::easy_legend_at("top")
default_colors <- scales::hue_pal()(2)
# Create a scatter plot of logSFR_pred vs logSFR_total
ggplot(sfr_diff, aes(y = logSFR_pred, x = logSFR_total, color = flag)) +
geom_point(size = 0.9) +
# Error bar for x based on _sigma
geom_errorbar(
aes(
ymin = logSFR_pred - logSFR_pred_sigma,
ymax = logSFR_pred + logSFR_pred_sigma
),
width = 0.1
) +
# legend for keep and discard = "Kept data", "Discarded data"+ the number of points for eac
scale_color_manual(
name = "Data Flag", # Legend title
values = c("Keep" = "blue", "Discard" = "red"),
breaks = c("Keep", "Discard")
labels = c(
default_colors <- scales::hue_pal()(2)
# Create a scatter plot of logSFR_pred vs logSFR_total
ggplot(sfr_diff, aes(y = logSFR_pred, x = logSFR_total, color = flag)) +
geom_point(size = 0.9) +
# Error bar for x based on _sigma
geom_errorbar(
aes(
ymin = logSFR_pred - logSFR_pred_sigma,
ymax = logSFR_pred + logSFR_pred_sigma
),
width = 0.1
) +
# legend for keep and discard = "Kept data", "Discarded data"+ the number of points for eac
scale_color_manual(
name = "Data Flag", # Legend title
values = c("Keep" = "blue", "Discard" = "red"),
breaks = c("Keep", "Discard"),
labels = c(
paste("Kept data (n =", sum(sfr_diff$flag == "Keep"), ")"),
paste("Discarded data (n =", sum(sfr_diff$flag == "Discard"), ")")
)
) +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
xlim(-8, 1) +
labs(
title = TeX("Comparison of $log_{10}SFR_{pred}$ and $log_{10}SFR_{obs}$"),
x = TeX("$log_{10}\\left[\\frac{SFR_{obs}}{M_o/yr} \\right]$"),
y = TeX("$log_{10}\\left[\\frac{SFR_{pred}}{M_o/yr} \\right]$")
) +
ggeasy::easy_center_title() +
ggeasy::easy_legend_at("top")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
library(ggplot2)
# Example plot with the odot symbol (⊙)
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Scatterplot with ⊙ symbol", x = "Weight", y = "Miles per Gallon")
tar_make()
tar_make()
tar_make()
⊙
tar_make()
tar_make()
tar_make()
TeX("$\\odot$")
TeX("$\\\odot$")
TeX("$\\odot$")
TeX("$\odot$")
TeX("\\odot")
tar_make()
tar_make()
tar_make()
TeX("\u2299")
sfr_diff = tar_read(sfr_diff)
tar_load_globals()
sfr_comparison_plot(sfr_diff, logSFR_pred, logSFR_total)
tar_load_globals()
sfr_comparison_plot(sfr_diff, logSFR_pred, logSFR_total)
tar_make()
library(ggplot2)
library(latex2exp)
# Combine Unicode and latex2exp
x_label <- TeX(paste0("$log_{10}\\left[\\frac{SFR_{obs}}{M_{\\u2299}/yr} \\right]$"))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
custom_odot <- function() {
TeX("$\\odot$")
}
# Use the custom command in your label
x_label <- TeX(paste0("$log_{10}\\left[\\frac{SFR_{obs}}{M_", custom_odot(), "/yr} \\right]$"))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- paste0("log\u2081\u2080[SFR\u209B\u209A\u209A/(M\u2299/yr)]")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- paste0("log\u2081\u2080[SFR\u209B\u209A\u209A/(M_\u2299/yr)]")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
library(ggplot2)
library(latex2exp)
# Define the Unicode symbol for ⊙
odot_symbol <- "⊙"
# Combine Unicode and LaTeX
x_label <- TeX(paste0("$log_{10}\\left[\\frac{SFR_{obs}}{M_", odot_symbol, "/yr} \\right]$"))
library(ggplot2)
# Use bquote() to mix Unicode and plotmath
x_label <- bquote(log[10] * "[" * frac(SFR[obs], M * "⊙" / yr) * "]")
# Plot
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(symbol("M"["\305"]))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(symbol("M"["\u2299"]))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(symbol("M"["\u299"]))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(symbol("M"["\u2299"]))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(Log(M[stellar]/M['☉']
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
# Use the Unicode escape sequence for ⊙
x_label <- expression(Log(M[stellar]/M['☉']
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
# Use the Unicode escape sequence for ⊙
x_label <- expression(Log(M[stellar]/M[☉]))
# Use the Unicode escape sequence for ⊙
x_label <- expression(Log(M[stellar]/M["☉"]))
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
# Use the Unicode escape sequence for ⊙
x_label <- expression(log[10] * "[" * frac(SFR[obs], M["☉"] / yr) * "]")
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
library(ggplot2)
# Define the label using expression()
x_label <- expression(log[10] * "[" * frac(SFR[obs], M["☉"] / yr) * "]")
# Create the plot
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
library(ggplot2)
# Define the label using expression() and bgroup()
x_label <- expression(log[10] * bgroup("[", frac(SFR[obs], M["☉"] / yr), "]"))
# Create the plot
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(x = x_label, y = "Miles per Gallon")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
library(targets)
tar_visnetwork()
tar_visnetwork()
tar_make()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_make(mean_median_plots)
tar_make(mean_median_plots)
tar_make()
tar_make()
tar_make()
tar_make()
