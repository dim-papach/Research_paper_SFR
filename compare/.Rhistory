import numpy as np
import numpy.ma as ma
import pandas as pd
from astropy.io import ascii
from astropy.table import Table, QTable, join, hstack, vstack, unique, Column, MaskedColumn, setdiff
from astropy.utils.masked import Masked
from astropy.coordinates import SkyCoord, Galactic, Angle
from astropy.time import Time
import astropy.units as u
from astropy.utils.diff import report_diff_values
from astropy.visualization import quantity_support, hist
quantity_support()
import glob as glob
import sys
import matplotlib.pyplot as plt
from plotnine import (
ggplot,qplot, ggsave, aes,
after_stat,
stage,
geom_point, geom_smooth, geom_qq, geom_bar, geom_text, geom_label,
position_dodge2,
facet_wrap,
labs,
scale_x_continuous, scale_x_log10, scale_y_log10,
xlim, ylim,
stat_qq
)
from scipy import optimize, stats
from sympy import symbols, exp, log, lambdify
import seaborn as sns
from custom_table import CustomQTable
dt = QTable.read("./tables/final_table.ecsv")
sns.set_theme(style="darkgrid")
sns.set_palette("viridis")
hubble = (ggplot(dt.to_pandas())
+ aes( x = "Dis", y =  "VLG")
+ labs( x = f"Distance [{dt['Dis'].unit}]" , y = "Radial velocities $V_{LG} $"+f"[{dt['VLG'].unit:latex}]" )
+ xlim(0,11) + ylim(0,1200)
+ geom_smooth(color = "red")
+ geom_point()
)
fname = "figure/hubble.png"
hubble.save(fname)
plt.show()
plt.close()
filename = "figure/mapping"
# Assuming dt is your data table containing coordinates, mass, and distance
c = dt["Coordinates"]
mass = dt["M26"].data  # Assuming mass is provided in some unit
distance = dt["Dis"].data  # Assuming distance is provided in some unit
# Extract Galactic Coordinates
galactic_coords = c.galactic
# Extract Equatorial Coordinates
equatorial_coords = c.transform_to('icrs')
# Define the size and color based on mass and distance
marker_size = np.sqrt(mass) * 0.0002  # Adjust scaling factor as needed
marker_color = distance   # Use distance directly for marker color
# Plot Galactic Coordinates
plt.figure(figsize=(8, 8))
plt.subplot(211, projection="aitoff")
plt.grid(True)
plt.scatter(galactic_coords.l.wrap_at(180 * u.deg).radian, galactic_coords.b.radian, s=marker_size, c=marker_color, cmap='viridis')
plt.colorbar(label='Distance [{}]'.format(dt['Dis'].unit))  # Add colorbar for distance
plt.title("Galactic Coordinates")
# Plot Equatorial Coordinates
plt.subplot(212, projection="mollweide")
plt.grid(True)
plt.scatter(equatorial_coords.ra.wrap_at(180 * u.deg).radian, equatorial_coords.dec.radian, s=marker_size, c=marker_color, cmap='viridis')
plt.colorbar(label='Distance [{}]'.format(dt['Dis'].unit))  # Add colorbar for distance
plt.title("Equatorial Coordinates")
plt.suptitle("Galaxies of the LCV with Mass and Distance Representation")
plt.tight_layout()  # Adjust spacing between subplots
plt.savefig(filename)
plt.close()
filename+".png"
x="TType"
file="Types"
label="Morphology type code"
dttype = pd.DataFrame({"x": dt["{}".format(x)]}).dropna()
morphology = (
ggplot(dttype, aes("factor(x)"))
+ geom_bar(color="black", fill="#1f77b4", show_legend=False)
+ geom_text(
aes(label=after_stat("count")),
stat="count",
nudge_y=15,
va="bottom",
size = 9
)
+ geom_text(
aes(label=after_stat("prop*100"), group=1),
stat="count",
va="bottom",
format_string="({:.1f}%)",
size = 6
)
+ labs(x = "{}".format(label))
)
fname = "figure/{}.png".format(file)
morphology.save(fname)
"[[./"+fname+"]]"
for column in dt.columns:
if column.startswith("l_") or column.startswith("f_"):
if column.startswith("l_"):
corresponding_column_name = column[2:]  # Remove the 'l_' prefix
else:
corresponding_column_name = column[2:]  # Remove the 'f_' prefix
try:
all_masks_in_corresponding = all(mask in dt[corresponding_column_name].mask for mask in dt[column].mask)
if all_masks_in_corresponding:
print(f"All masks in {column} are also masks in {corresponding_column_name}")
else:
print(f"Not all masks in {column} are masks in {corresponding_column_name}")
except AttributeError:
print(f"We have no mask for {column}")
t_sf = 12 * u.Gyr
zeta = 1.3
z = 5
dt["StellarMass"] = 0.6 * dt["KLum"]* u.Msun/u.solLum
dt["StellarMass"].description = "K-band luminosity using a mass-to-light ratio of 0.6"
dt["StellarMass"].info()
dt["BarMass"] = dt["M_g"] + dt["StellarMass"]
dt["BarMass"].info()
dt["mass_ratio"] = dt["M_g"] / dt["StellarMass"]
dt["mass_ratio"].info(["attributes", "stats"])
#seaborn plot of mass_ratio
sns.histplot(dt["mass_ratio"].value)
plt.xscale("log")
plt.show()
dt["color"] = dt["FUVmag"]-dt["Bmag"]
#hist
hist(dt["color"], bins = "freedman")
plt.xlabel("Color index")
plt.ylabel("Number of stars")
plt.title("Color index <FUV - B> distribution")
#save
plt.savefig("figure/color_index.png")
plt.close()
#print in org
"./figure/color_index.png"
SFR_unit = u.Msun/u.year
dt.rename_column("SFRFUV", "logSFRFUV")
dt["SFRFUV"] = 10**dt["logSFRFUV"].value * SFR_unit
dt["SFRFUV"].mask = dt["logSFRFUV"].mask
dt["SFRFUV"].description = dt["logSFRFUV"].description
dt["SFRFUV"].info()
dt.rename_column("SFRHa", "logSFRHa")
dt["SFRHa"] = 10**dt["logSFRHa"].value * SFR_unit
dt["SFRHa"].mask = dt["logSFRHa"].mask
dt["SFRHa"].description = dt["logSFRHa"].description
plt.scatter(dt["SFRHa"],dt["SFRFUV"])
plt.show()
dt[["SFRFUV", 'SFRHa']].info("stats")
SFR_0 = np.mean([dt["SFRHa"], dt["SFRFUV"]], axis =0, where = [~dt["SFRHa"].mask, ~dt["SFRFUV"].mask])
dt["SFR_0"] = SFR_0 * SFR_unit
dt[["SFR_0","SFRFUV", 'SFRHa']].info("stats")
print(dt["SFRHa"].info('stats'))
dc = dt.copy()
dc = dc[dc["SFR_0"].value >= 1e-3]
print(dc["SFR_0"].info())
dc[["SFR_0","SFRFUV", 'SFRHa']].info("stats")
hist(dc["SFR_0"].value, bins = "scott")
plt.show()
dc["av_SFR_theor"] = 1.3 * dc["StellarMass"] / t_sf.to(u.yr)
dc["av_SFR_theor"].info()
plt.scatter(y = dc["av_SFR_theor"],x = dc["SFR_0"], c = dc["color"].value)
#colobar
plt.colorbar()
plt.xscale("log")
plt.yscale("log")
plt.show()
dc["SFR_ratio"] = dc["av_SFR_theor"] / dc["SFR_0"]
#log10 of ratio
dc["logSFR_ratio"] = np.log10(dc["SFR_ratio"])
dc[["SFR_ratio", "logSFR_ratio"]].info(["attributes","stats"])
plt.scatter(y = dc["SFR_ratio"],x = dc["SFR_0"], c = dc["color"].value)
#colobar
plt.colorbar()
plt.xscale("log")
plt.yscale("log")
plt.show()
plt.scatter(y = dc["SFR_ratio"],x =dc["color"] )
#title and labels with units in latex
plt.yscale("log")
plt.title("(ratio) vs color")
plt.ylabel("(ratio)")
plt.xlabel("color")
#save in dir figure
plt.savefig("figure/ratio_vs_color.png")
plt.close()
#print file
print("figure/ratio_vs_color.png")
dc["SFR_0", "SFR_ratio", "StellarMass"].info()
ratio_array = np.array(dc["SFR_ratio"])
sfr_array = np.array(dc["SFR_0"])
mass_array = np.array(dc["StellarMass"])
tsf = t_sf/u.yr
x2 = np.empty(len(dc))
for i in range(len(dc)-1):
ratio = ratio_array[i]
mass = mass_array[i]
sfr = sfr_array[i]
def f(x):
return (-sfr + zeta*mass*x**2/(np.exp(x)-1-x)/tsf )  # only one real root at x = 1
def f_prime(x):
return -zeta*mass*(x*(np.exp(x)*(x-2)+x+2)/(np.exp(x)-x-1)**2)/tsf
sol = optimize.root_scalar(f, bracket=[0, 4], x0 = 3.4, fprime = f_prime, method="newton")
x2[i] = sol.root
dc["x_n"] = x2
dc["A_n"] = dc["SFR_0"]*t_sf.to(u.yr)*np.exp(dc["x_n"])/(dc["x_n"]**2)
print(dc["x_n", "A_n"].info("stats"))
# Assuming you have already loaded your data into an Astropy table named 'dts'
# Replace 'x' with the name of the column you want to plot
# Create a histogram
hist(dc["x_n"], bins = "freedman")  # Adjust the number of bins as needed
plt.xlabel('X values')
plt.ylabel('Frequency')
plt.title('Histogram of Astropy Column "x"')
plt.show()
from scipy.optimize import fsolve
# Example loop
x = np.ma.empty(len(dc))
A = np.ma.empty(len(dc))
for i in range(len(dc)-1):
ratio = ratio_array[i]
mass = mass_array[i]
sfr = sfr_array[i]
def sfrx(z):
x = z[0]
A = z[1]
f = np.zeros(2)
f[0] = ratio - (np.exp(x) - x - 1) / x**2
f[1] = sfr - A * x * tsf * np.exp(-x) / x
return f
# Solve the equation
z = fsolve(sfrx, [3, 10*9])
x[i] = z[0]
A[i] = z[1]
## mask if sfr ratio or mass is nan
if np.isnan(ratio) or np.isnan(mass):
x[i] = np.nan
A[i] = np.nan
dc["x_f"] = MaskedColumn(x, name = "x")
dc["A_f"] = MaskedColumn(A, name = "A", unit = u.solMass)
print(dc["x_f","A_f"].info(["attributes" ,"stats"]))
plt.scatter(dc["x_f"], dc["A_f"])
#plt.scatter(dc["x_n"], dc["A_n"], alpha = 0.7)
plt.xlabel('x')
plt.yscale("log")
plt.title('scatter of x and A')
plt.show()
hist(dc["x_f"], bins = "knuth")
hist(dc["x_n"], bins = "knuth", alpha = 0.6)
plt.xlabel('x')
plt.ylabel("Number of galaxies")
plt.title('Hist of x solved with fsolve and Newton')
#show the labels
plt.legend(["fsolve", "Newton"])
plt.savefig("figure/x-hist.png")
plt.close()
"figure/x-hist.png"
print(dc["x","x2"].info(["attributes" ,"stats"]))
plt.scatter(dc["x_f"], dc["x_n"])
plt.xlabel('$x_{fsolve}$')
plt.ylabel(r'$x_{Newton}$')
plt.title('scatter of $x_{Newton}$ and $x_{fsolve}$')
#savefig and print the file
plt.savefig("figure/x-scatter.png")
plt.close()
"figure/x-scatter.png"
hist(dc["A_f"], bins = "blocks")
hist(dc["A_n"], bins = "blocks")
plt.xscale("log")
plt.xlabel('$A_{del}$'+f'[{dc["A_n"].unit:latex}]')
plt.legend(["fsolve", "Newton"])
plt.ylabel("Number of galaxies")
plt.title('Histogram of $A_{del}$')
#save
plt.savefig("figure/A-hist.png")
plt.close()
"figure/A-hist.png"
dc['tau'] = t_sf/dc["x_f"]
print(dc["tau"].info(["attributes", "stats"]))
hist(dc["tau"].data, bins = "freedman")
plt.show()
plt.scatter(dc["x_f"], dc["A_f"], c=np.log10(dc["SFR_0"]/dc["SFR_0"].unit), cmap = "viridis")
plt.title('Scatter plot of A vs x')
plt.xlabel(r'$\tau$ '+ f'[{dc["tau"].unit:latex}]')
plt.ylabel(r'$A$ '+ f'[{dc["A_f"].unit:latex}]')
plt.yscale("log")
plt.colorbar()
plt.show()
print(dc["A_n", "x_n"].info())
plt.scatter(dc["A_n"], dc["x_n"], c=np.log10(dc["StellarMass"]/dc["StellarMass"].unit), cmap = "viridis")
plt.title('Scatter plot of A vs x')
plt.xlabel(r'$\tau$ '+ f'[{dc["tau"].unit:latex}]')
plt.ylabel(r'$A$ '+ f'[{dc["A_f"].unit:latex}]')
plt.yscale("log")
plt.colorbar()
plt.show()
df = dc.to_pandas()
# Assuming df is your DataFrame
# Step 1: Identify non-numeric columns
non_numeric_columns = df.select_dtypes(exclude=['float', 'int']).columns
# Step 2: Drop non-numeric columns or handle them appropriately
df_numeric = df.drop(columns=non_numeric_columns)
# Step 3: Replace NaN values with zeros or other appropriate values
df_numeric = df_numeric.loc[:, ~df_numeric.columns.str.startswith('e_')]
df_numeric = df_numeric.loc[:, ~df_numeric.columns.str.startswith('Name')]
df_numeric = df_numeric.loc[:, ~df_numeric.columns.str.startswith('Coord')]
df_numeric = df_numeric.loc[:, ~df_numeric.columns.str.startswith('log')]
# Step 4: Calculate the correlation matrix
correlation_matrix = df_numeric.corr()
plt.close("all")
# Plot heatmap using seaborn
sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm', fmt=".2f", linewidths=0.5)
# Set x-axis tick labels
plt.xticks(ticks=np.arange(0.5, len(correlation_matrix.columns)), labels=correlation_matrix.columns, rotation=90)
# Set y-axis tick labels
plt.yticks(ticks=np.arange(0.5, len(correlation_matrix.index)), labels=correlation_matrix.index, rotation=0)
plt.title('Correlation Heatmap')
plt.savefig("figure/heatmap")
plt.show()
plt.close("all")
clustermap = sns.clustermap(correlation_matrix, cmap='coolwarm', fmt=".2f", linewidths=0.5,
row_cluster=False, col_cluster=False)
ax = clustermap.ax_heatmap
# Set x-axis tick labels
ax.set_xticks(np.arange(0.5, len(correlation_matrix.columns)))
ax.set_xticklabels(correlation_matrix.columns, rotation=90)
# Set y-axis tick labels
ax.set_yticks(np.arange(0.5, len(correlation_matrix.index)))
ax.set_yticklabels(correlation_matrix.index, rotation=0)
plt.savefig("figure/clustermap")
plt.show()
plt.close("all")
#PairGrid with StellarMass, MHI, SFR_0 and av_SFR_theor, M26
#log scale axes
sns.pairplot(df, vars=["StellarMass", "MHI", "SFR_0", "av_SFR_theor", "M26"], kind="reg", diag_kind="kde")
plt.savefig("figure/pairplot")
plt.show()
plt.close("all")
print(df[["StellarMass", "MHI", "SFR_0", "av_SFR_theor", "M26", "M_g", "tau", "A"]].corr())
plt.scatter(dt["SFRHa"],dt["SFRFUV"])
plt.show()
plt.scatter(dt["SFRHa"],dt["SFRFUV"])
plt.show()
-   Λύση με υπολογιστικές μεθόδουςPython fsolve: Ψάχνει λύσεις και για τις δύο εξισώσεις ταυτόχρονα.
-   Σύστημα 2 εξισώσεων και 2 μεταβλητών ($A_{del},\ \tau$), κρατώντας το $t_{sf} = 13.6$ σταθερό.
source("~/.active-rstudio-document", echo=TRUE)
---
title: "Τιτλος"
---
title: "Τιτλος"
---
title: "Παρουσιαση πτυχιακης"
reticulate::repl_python()
