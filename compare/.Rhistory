plt.title(f"Completeness of {description} for {label}")
if units:
plt.xlabel(f"{description} [{main_df[column_name].unit}]")
else:
plt.xlabel(f"{description}")
plt.ylabel("Number of galaxies")
plt.legend()
# Calculate histogram counts for each dataset
main_counts, _ = np.histogram(main_data_clean, bins=bin_edges)
unique_counts, _ = np.histogram(unique_data_clean, bins=bin_edges)
inner_counts, _ = np.histogram(inner_data_clean, bins=bin_edges)
# Calculate bin centers for annotation
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
# Annotate percentages on the bars
for i, center in enumerate(bin_centers):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
plt.text(center, unique_counts[i], f'{unique_pct:.1f}%', color="green", ha='center', va='bottom')
plt.text(center, inner_counts[i], f'{inner_pct:.1f}%', color="orange", ha='center', va='bottom')
# Show the plot
plt.show()
plt.close()
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True, logx = True)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True,)
plt.close()
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True,)
plot_completeness("lcv", column_name = "RVel", description = "Velocities",keep_nan = True)
plot_completeness("lcv", column_name = "logKlum", description = "Velocities",keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "Velocities",keep_nan = True)
def plot_completeness(dataset_choice="lcv", column_name="Dis", description="Distance", units=True, logx = False, logy = False, bins=0, keep_nan = False):
"""
Plots histograms with KDE and displays a table of counts and percentages for each bin,
based on the choice of dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the Qtable to plot and analyze (default is "Dis")
- description: What to show in the title and the axis (default "Distance")
- units: Show units or not (default is True)
- logx: logarithmic x-axis (default is False)
- logy: logarithmic y-axis (default is False)
- bins: Number of bins or custom bin edges (default is 'auto')
- keep_nan: keep (true) or remove NaN's (default is True)
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HECATE"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
# Remove NaN values before plotting
if keep_nan == False:
main_data_clean = main_df[column_name].data[~np.isnan(main_df[column_name].data)]
unique_data_clean = unique_df[column_name].data[~np.isnan(unique_df[column_name].data)]
inner_data_clean = inner[column_name].data[~np.isnan(inner[column_name].data)]
else:
main_data_clean = main_df[column_name].data
unique_data_clean = unique_df[column_name].data
inner_data_clean = inner[column_name].data
# Check if bins is an integer or array of bin edges
if bins == 0:
counts, bin_edges = np.histogram(main_data_clean, bins='auto')
elif isinstance(bins, int):
counts, bin_edges = np.histogram(main_data_clean, bins=bins)
else:
bin_edges = bins  # If bins is an array of bin edges
# Plot the histograms
sns.histplot(main_data_clean, bins=bin_edges, kde=True, label=label)
sns.histplot(unique_data_clean, bins=bin_edges, kde=True, label=f"Unique for {label}")
# Set the title and labels
plt.title(f"Completeness of {description} for {label}")
if units:
plt.xlabel(f"{description} [{main_df[column_name].unit}]")
else:
plt.xlabel(f"{description}")
plt.ylabel("Number of galaxies")
plt.legend()
# Calculate histogram counts for each dataset
main_counts, _ = np.histogram(main_data_clean, bins=bin_edges)
unique_counts, _ = np.histogram(unique_data_clean, bins=bin_edges)
inner_counts, _ = np.histogram(inner_data_clean, bins=bin_edges)
# Calculate bin centers for annotation
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
# Annotate percentages on the bars
for i, center in enumerate(bin_centers):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
plt.text(center, unique_counts[i], f'{unique_pct:.1f}%', color="green", ha='center', va='bottom')
plt.text(center, inner_counts[i], f'{inner_pct:.1f}%', color="orange", ha='center', va='bottom')
# Show the plot
plt.show()
plt.close()
plot_completeness("lcv", column_name = "logKLum", description = "Velocities",keep_nan = True)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True,)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = False,)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "Velocities",keep_nan = True)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "Velocities",keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "log_10(L_K)",keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "$log_10(L_K)$",keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "$log_{10}(L_K)$",units=False,keep_nan = True)
def plot_completeness(dataset_choice="lcv", column_name="Dis", description="Distance", units=True, logx = False, logy = False, bins=0, keep_nan = False):
"""
Plots histograms with KDE and displays a table of counts and percentages for each bin,
based on the choice of dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the Qtable to plot and analyze (default is "Dis")
- description: What to show in the title and the axis (default "Distance")
- units: Show units or not (default is True)
- logx: logarithmic x-axis (default is False)
- logy: logarithmic y-axis (default is False)
- bins: Number of bins or custom bin edges (default is 'auto')
- keep_nan: keep (true) or remove NaN's (default is True)
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HECATE"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
# Remove NaN values before plotting
if keep_nan == False:
main_data_clean = main_df[column_name].data[~np.isnan(main_df[column_name].data)]
unique_data_clean = unique_df[column_name].data[~np.isnan(unique_df[column_name].data)]
else:
main_data_clean = main_df[column_name].data
unique_data_clean = unique_df[column_name].data
# Check if bins is an integer or array of bin edges
if bins == 0:
counts, bin_edges = np.histogram(main_data_clean, bins='auto')
elif isinstance(bins, int):
counts, bin_edges = np.histogram(main_data_clean, bins=bins)
else:
bin_edges = bins  # If bins is an array of bin edges
# Plot the histograms
sns.histplot(main_data_clean, bins=bin_edges, kde=True, label=label)
sns.histplot(unique_data_clean, bins=bin_edges, kde=True, label=f"Unique for {label}")
# Set the title and labels
plt.title(f"Completeness of {description} for {label}")
if units:
plt.xlabel(f"{description} [{main_df[column_name].unit}]")
else:
plt.xlabel(f"{description}")
plt.ylabel("Number of galaxies")
plt.legend()
# Calculate histogram counts for each dataset
main_counts, _ = np.histogram(main_data_clean, bins=bin_edges)
unique_counts, _ = np.histogram(unique_data_clean, bins=bin_edges)
# Calculate bin centers for annotation
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
# Annotate percentages on the bars
for i, center in enumerate(bin_centers):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
plt.text(center, unique_counts[i], f'{unique_pct:.1f}%', color="green", ha='center', va='bottom')
# Show the plot
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the $L_K$ Completeness of the Catalogs"
#| fig-subcap:
#| - "HECATE"
#| - "LCV"
#| label: fig-type-comp
plt.close()
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "$log_{10}(L_K)$",units=False,keep_nan = True)
#| layout-ncol: 2
#| fig-cap: "Histograms showing the $L_K$ Completeness of the Catalogs"
#| fig-subcap:
#| - "HECATE"
#| - "LCV"
#| label: fig-type-comp
plt.close()
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "$log_{10}(L_K)$",units=False,keep_nan = True)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True)
plot_completeness("lcv", column_name = "logKLum", description = "$log_{10}(L_K)$",units=False,keep_nan = True)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = True, bins = 34)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = False, bins = 34)
plt.close()
sns.histplot(dt["logL_K"], bins=bin_edges, kde=True, )
sns.histplot(dt["logL_K"], kde=True, )
sns.histplot(hec["logL_K"], kde=True, label=f"Unique for {label}")
plt.show()
plt.close()
# Plot the histograms
plt.close()
sns.histplot(dt["logL_K"], kde=True, )
sns.histplot(hec["logL_K"], kde=True, label=f"Unique for {label}")
plt.show()
plt.close()
# Plot the histograms
plt.close()
sns.histplot(dt["logL_K"], kde=True, label = "afd")
sns.histplot(hec["logL_K"], kde=True, label=f"Unique for {label}")
plt.legend()
plt.show()
plt.close()
# Plot the histograms
plt.close()
sns.histplot(dt["logL_K"], kde=True, label = "afd")
sns.histplot(hec["logL_K"], kde=True, label=f"Unique for")
plt.legend()
plt.show()
plt.close()
# Plot the histograms
plt.close()
sns.histplot(hec_not_lcv["logL_K"], kde=True, label = "afd")
sns.histplot(hec["logL_K"], kde=True, label=f"Unique for")
plt.legend()
plt.show()
plt.close()
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = False, bins = 34)
plot_completeness("hec", column_name = "logL_K", description = "log_10(L_K)", keep_nan = False, bins = 0)
plot_completeness("hec", column_name = "logL_K", description = "$log_{10}(L_K)$", keep_nan = False, bins = 0)
plot_completeness("dt", column_name = "logL_K", description = "$log_{10}(L_K)$", keep_nan = False, bins = 0)
plot_completeness("hec", column_name = "logL_K", description = "$log_{10}(L_K)$", keep_nan = False, bins = 0)
plot_completeness("lcv", column_name = "logL_K", description = "$log_{10}(L_K)$", keep_nan = False, bins = 0)
plot_completeness("hec", column_name = "logL_K", description = "$log_{10}(L_K)$", keep_nan = False, bins = 0)
plot_completeness("hec", column_name = "logL_K", description = "$log_{10}(L_K)$", units = False,keep_nan = False, bins = 0)
sns.histplot(hec_not_lcv["logL_K"], kde=True, label = "afd", count = True)
sns.histplot(hec_not_lcv["logL_K"], kde=True, label = "afd", stat = count)
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
return table_df
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
return table_df
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
return table_df
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
return table_df
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
def table_completeness(dataset_choice, column_name="Dis", description = "Distance"):
"""
Creates a table of counts and percentages for each bin based on the chosen dataset (LCV or HEC).
Parameters:
- dataset_choice: A string indicating which dataset to use ("lcv" or "hec")
- column_name: The column name in the datasets to analyze (default is "Dis")
- description: what to show in the title and the axis (default "Distance")
"""
if dataset_choice == "lcv":
main_df, unique_df, label = lcv, lcv_not_hec, "LCV"
elif dataset_choice == "hec" and hec is not None and hec_not_lcv is not None:
main_df, unique_df, label = hec, hec_not_lcv, "HEC"
else:
raise ValueError("Invalid dataset choice. Please choose 'lcv' or 'hec' with valid datasets.")
counts, bin_edges = np.histogram(main_df[column_name].data, bins='auto')
main_counts, _ = np.histogram(main_df[column_name].data, bins=bin_edges)
unique_counts, _ = np.histogram(unique_df[column_name].data, bins=bin_edges)
inner_counts, _ = np.histogram(inner[column_name].data, bins=bin_edges)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
table_data = []
for i in range(len(bin_centers)):
if main_counts[i] > 0:
unique_pct = (unique_counts[i] / main_counts[i]) * 100
inner_pct = (inner_counts[i] / main_counts[i]) * 100
table_data.append({
"Bin Start": round(bin_edges[i]),
"Bin End": round(bin_edges[i+1]),
f"Unique %": f'{unique_pct:.0f}%',
"Inner %": f'{inner_pct:.0f}%'
})
table_df = pd.DataFrame(table_data)
return table_df
View(plot_completeness)
View(table_completeness)
