#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
from astropy.io import ascii
from astropy.coordinates import SkyCoord
from astropy.table import Table, join, QTable
import astropy.units as u
from astropy.visualization import quantity_support, hist
#quantity_support()
from astropy.stats import sigma_clip, SigmaClip
from astropy.modeling import models, fitting
from scipy.stats import pearsonr
import seaborn as sns
import pandas as pd
import glob
import os
plt.style.use('ggplot')
pd.set_option('display.float_format', lambda x: '%.f' % x)
dt = QTable(ascii.read("../tables/inner_join.ecsv"), masked=True)
inner = dt
outer = QTable(ascii.read("../tables/outer_join.ecsv"), masked=True)
hec_not_lcv = QTable(ascii.read("../tables/HEC_not_LCV_join.ecsv"), masked=True)
lcv_not_hec = QTable(ascii.read("../tables/LCV_not_HEC_join.ecsv"), masked=True)
lcv = QTable(ascii.read("../tables/final_table.ecsv"), masked=True)
hec = QTable(ascii.read("../tables/HECATE_LCV.ecsv"), masked=True)
#| output: asis
# Creating a dataframe with the lengths of each table
data = {
"Table": ["Inner join", "Outer join", "LCV", "HECATE", "Unique galaxies in LCV", "Unique Galaxies in Hecate"],
"Number of galaxies": [len(dt), len(outer), len(lcv), len(hec), len(lcv_not_hec), len(hec_not_lcv)]
}
df_lengths = pd.DataFrame(data)
# Pretty print the dataframe in markdown format
df_lengths_md = df_lengths.to_markdown(index=False)
print(df_lengths_md)
_, bins_egde = hist(hec["D"])
bins_egde = hist(hec["D"])
hist(hec["D"])
hist(hec["D"], bins = "blocks")
hist(hec["D"].value, bins = "blocks")
hist(hec["T"].value, bins = "blocks")
hist(hec["T"], bins = "blocks")
hist(hec["T"], bins = "blocks")
hist(hec["T"], bins = "knuth")
hist(hec["T"], bins = "scott")
hist(hec["T"], bins = "auto")
bins = hist(hec["T"], bins = "auto")
bins_ = hist(hec["T"], bins = "blocks")
bins_
,bins_ = hist(hec["T"], bins = "blocks")
bins_
s,bins_ = hist(hec["T"], bins = "blocks")
bins_
s ,bins_ = hist(hec["T"], bins = "blocks")
bins_
bins_ = hist(hec["T"], bins = "blocks")
bins_
bins_ = histogramm(hec["T"], bins = "blocks")
bins_
bins_ = histogram(hec["T"], bins = "blocks")
bins_
bins_ = astropy.stats.histogram(hec["T"], bins = "blocks")
bins_
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
import astropy
from astropy.io import ascii
from astropy.coordinates import SkyCoord
from astropy.table import Table, join, QTable
import astropy.units as u
from astropy.visualization import quantity_support, hist
#quantity_support()
from astropy.stats import sigma_clip, SigmaClip
from astropy.modeling import models, fitting
from scipy.stats import pearsonr
import seaborn as sns
import pandas as pd
import glob
import os
plt.style.use('ggplot')
pd.set_option('display.float_format', lambda x: '%.f' % x)
dt = QTable(ascii.read("../tables/inner_join.ecsv"), masked=True)
inner = dt
outer = QTable(ascii.read("../tables/outer_join.ecsv"), masked=True)
hec_not_lcv = QTable(ascii.read("../tables/HEC_not_LCV_join.ecsv"), masked=True)
lcv_not_hec = QTable(ascii.read("../tables/LCV_not_HEC_join.ecsv"), masked=True)
lcv = QTable(ascii.read("../tables/final_table.ecsv"), masked=True)
hec = QTable(ascii.read("../tables/HECATE_LCV.ecsv"), masked=True)
bins_ = astropy.stats.histogram(hec["T"], bins = "blocks")
bins_
bins_ = np.histogram(hec["T"].data, bins = "auto")
bins_
bins_ = np.histogram(hec["T"].value, bins = "auto")
bins_
_,bins_ = np.histogram(hec["T"].value, bins = "auto")
bins_
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-dis-comp
plt.close()
# Using numpy's histogram function to get the bin edges automatically for the first dataset
_, bin_edges = np.histogram(hec["D"].data, bins='auto')  # 'auto' decides the best number of bins for the data
# Step 2: Use the same bin edges for all datasets
sns.histplot(hec["D"].value, bins=bin_edges, kde=True, label="HECATE")
sns.histplot(hec_not_lcv["D"].value, bins=bin_edges, kde=True, label="Unique for Hecate")
sns.histplot(inner["D"].value, bins=bin_edges, kde=True, label="Inner join")
plt.title("Completeness of Distance for HECATE")
plt.xlabel("Distance [Mpc]")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
# Using numpy's histogram function to get the bin edges automatically for the first dataset
_, bin_edges = np.histogram(lcv["Dis"].data, bins='auto')  # 'auto' decides the best number of bins for the data
sns.histplot(lcv["Dis"].value, bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["Dis"].value, bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["Dis"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Distance for LCV")
plt.xlabel("Distance [Mpc]")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
_, bin_edges = np.histogram(hec["T"].data, bins='auto')  # 'auto' decides the best number of bins for the data
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
_, bin_edges = np.histogram(lcv["TType"].data, bins='auto')  # 'auto' decides the best number of bins for the data
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
bin_edges = 16
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
bin_edges = 14
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
bin_edges = 16
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
bin_edges = 15
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
bin_edges = 16
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
bin_edges = 14
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
bin_edges = 16
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
bin_edges = 14
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=15, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
#| layout-ncol: 2
#| fig-cap: "Histograms showing the Completeness of the Catalogs"
#| label: fig-type-comp
# Using numpy's histogram function to get the bin edges automatically for the first dataset
bin_edges = 16
sns.histplot(hec["T"], bins=bin_edges, kde = True, label = "HECATE")
sns.histplot(hec_not_lcv["T"], bins=bin_edges, kde = True, label = "Unique for Hecate")
sns.histplot(inner["T"].value, bins=bin_edges, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for HECATE")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
bin_edges = 14
sns.histplot(lcv["TType"], bins=bin_edges, kde = True, label = "LCV")
sns.histplot(lcv_not_hec["TType"], bins=bin_edges, kde = True, label = "Unique for LCV")
sns.histplot(inner["TType"].value, bins=16, kde = True, label = "Inner join")
plt.title("Completeness of Types of galaxies for LCV")
plt.xlabel("Type")
plt.ylabel("Number of galaxies")
plt.legend()
plt.show()
plt.close()
lcv["T"].info
lcv["T"].info()
lcv["TType"].info()
lcv["TType"].info("stats")
count()
np.unique(lcv["TType"])
np.unique(lcv["TType"], return_counts = True)
values, count = np.unique(lcv["TType"], return_counts = True)
table_md
values, count = np.unique(lcv["TType"], return_counts = True)
# Create a markdown table
table_md = "| Value | Count |\n|-------|-------|\n"
for value, count in zip(values, counts):
table_md += f"| {value}    | {count}    |\n"
table_md
values, count = np.unique(lcv["TType"], return_counts = True)
# Create a markdown table
table_md  = "| Value | Count |\n|-------|-------|\n"
for value, count in zip(values, count):
table_md += f"| {value}    | {count}    |\n"
table_md
# Count occurrences in the column
value_counts = lcv[["TType"]].to_pandas().value_counts().sort_index()
# Convert the result to a markdown table
table_md = value_counts.reset_index().to_markdown(index=False, headers=["Value", "Count"])
print(table_md)
from IPython.display import Markdown
Markdown(tabulate(table_md))
import tabulate
Markdown(tabulate(table_md))
table_md = value_counts.reset_index()
Markdown(tabulate(table_md))
table_md = value_counts
Markdown(tabulate(table_md))
Markdown(tabulate(table_md))
IPython.display.Markdown(tabulate(table_md))
# Count occurrences in the column
value_counts = lcv[["TType"]].to_pandas().value_counts().sort_index()
# Convert to a DataFrame to use the to_markdown() method
counts_df = value_counts.reset_index()
counts_df.columns = ['Value', 'Count']
# Print as a Markdown table
print(counts_df.to_markdown(index=False))
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
import astropy
from astropy.io import ascii
from astropy.coordinates import SkyCoord
from astropy.table import Table, join, QTable
import astropy.units as u
from astropy.visualization import quantity_support, hist
#quantity_support()
from astropy.stats import sigma_clip, SigmaClip
from astropy.modeling import models, fitting
from scipy.stats import pearsonr
import seaborn as sns
import pandas as pd
import glob
import os
from tabulate import tabulate
plt.style.use('ggplot')
pd.set_option('display.float_format', lambda x: '%.f' % x)
dt = QTable(ascii.read("../tables/inner_join.ecsv"), masked=True)
inner = dt
outer = QTable(ascii.read("../tables/outer_join.ecsv"), masked=True)
hec_not_lcv = QTable(ascii.read("../tables/HEC_not_LCV_join.ecsv"), masked=True)
lcv_not_hec = QTable(ascii.read("../tables/LCV_not_HEC_join.ecsv"), masked=True)
lcv = QTable(ascii.read("../tables/final_table.ecsv"), masked=True)
hec = QTable(ascii.read("../tables/HECATE_LCV.ecsv"), masked=True)
# Count occurrences in the column
value_counts = lcv[["TType"]].to_pandas().value_counts().sort_index()
# Convert to a DataFrame to use the to_markdown() method
counts_df = value_counts.reset_index()
counts_df.columns = ['Value', 'Count']
# Render as a table using tabulate
from IPython.display import display, Markdown
display(Markdown(tabulate(counts_df, headers='keys', tablefmt="pipe", showindex=False)))
#| layout-ncol: 2
# Count occurrences in the column
value_counts = lcv[["TType"]].to_pandas().value_counts().sort_index()
# Convert to a DataFrame to use the to_markdown() method
counts_df = value_counts.reset_index()
counts_df.columns = ['Value', 'Count']
# Render as a table using tabulate
from IPython.display import display, Markdown
display(Markdown(tabulate(counts_df, headers='keys', tablefmt="pipe", showindex=False)))
# Count occurrences in the column
value_counts = hec[["T"]].to_pandas().value_counts().sort_index()
# Convert to a DataFrame to use the to_markdown() method
counts_df = value_counts.reset_index()
counts_df.columns = ['Value', 'Count']
# Render as a table using tabulate
from IPython.display import display, Markdown
display(Markdown(tabulate(counts_df, headers='keys', tablefmt="pipe", showindex=False)))
