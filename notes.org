#+title: Reaserch Project Notes
#+subtitle:Constraints on the star formation histories of galaxies in the Local Cosmological Volume
#+PROPERTY: header-args:python :tangle main.py
#+startup: preview


#+begin_src python :session foo
import numpy as np
import pandas as pd
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
#+end_src

#+RESULTS:

* Tasks
** DONE Delete flags
** DONE Calculate SFR_0
** DONE Delete galaxies with $SFR_0<10^{-3}M_\odot yr^{-1}$
** DONE Calculate Mass of galaxies
** DONE Calculate $\overline{SFR}$
** TODO for $t_{sf}=12.5 Gyr$ calculate A, τ
** TODO for non constant t_sf try to find a relation t_sf=t_sf(Mass)



* Introduction

** The tension between the delayed-τ model and the obserations
From the delayed-τ model we are expecting $Ds=\overline{SFR}/SFR_0>1$ and for the galaxies documented in the Catalogue of Neighouring Galaxies we are expecting $Ds\approx 2$ but we observe $Ds\approx 1$ and even $Ds=0.85<1$, for the plausible assumption that the galaxies have been forming stars for $t_{sf}=12$ Gyr

We also expect by the model that the Star Formation Time-scale $\tau\approx 6.7$ Gyr, much longer than the 3.5-4.5 Gyr estimated by SP14.

** What is the point of this project?

I will try to calculate the values $A_{del},\ \tau,\ t_{sf}$, from the equations

\begin{equation}
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}
\end{equation}

\begin{equation}
    \overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
\end{equation}

where

$x\equiv\frac{t_{sf}}{\tau}$
for the delayed τ model

If we assume that SFH is a power law:



* Data/Karachentsev list

The data I will use for this project come from the Karachentsev catalogue (2022-06-30), which is an updated version of the list used in Kroupa et al. 2020

#+begin_src sh :results output
head Karachentsev_06_11_2022.txt
#+end_src

#+RESULTS:
#+begin_example
  99999   -3.07  6.43  7.05 
  -2.29   -2.03  7.58  7.92 
  99999 < -4.34  7.18  7.46 
  -2.68   -2.23  7.70  7.84 
< -5.97 < -5.84  6.44  6.65 
< -6.26 < -6.35  4.38 99999 
< -6.82   -5.67  5.59 99999 
< -6.47 < -6.38  4.75 99999 
  -1.47   -1.72  8.10  8.10 
  -4.64   -3.53  6.39  6.64 
#+end_example

The columns are:
1. column: Limit flag on $SFR_{Ha}$ (if "<" you can remove it)
2. column: $\log(SFR_{Ha})$ $(M_\odot/yr)$, $H\alpha$ derived integral star formation rate (1)
3. column: Limit flag on $SFR_{FUV}$ (if "<" you can remove it)
4. column: $\log(SFR_{FUV}) (M_\odot/yr)$, FUV derived integral star formation rate
5. column: Log K band luminosity, $\log(KLum)$ [solLum]
6. column: Log hydrogen mass, $\log(MHI)$ [solMass]


I created a Python script to delete the lines with "<"

#+begin_src python :tangle delete_lines.py
with open("Karachentsev_06_11_2022.txt", "r") as fp, open("Karachentsev_updated.txt","w") as new_fp:
    for line in fp:
        if "<"  not in line:
            new_fp.write(line)
#+end_src

#+RESULTS:
: None

#+begin_src shell
head Karachentsev_updated.txt
#+end_src

#+RESULTS:
| 99999 | -3.07 | 6.43 | 7.05 |
| -2.29 | -2.03 | 7.58 | 7.92 |
| -2.68 | -2.23 |  7.7 | 7.84 |
| -1.47 | -1.72 |  8.1 |  8.1 |
| -4.64 | -3.53 | 6.39 | 6.64 |
| -1.51 | -1.63 | 8.15 | 8.58 |
| -4.03 | -3.02 | 7.12 | 7.13 |
| -1.01 |  -0.6 | 9.48 | 8.64 |
| -0.54 | -0.45 | 9.33 | 9.18 |
| -3.67 | 99999 | 6.53 | 6.96 |

That way we no longer have data with limit flags and we have less columns
The columns are:
1. column: $\log(SFR_{Ha})$ $(M_\odot/yr)$, $H\alpha$ derived integral star formation rate (1)
2. column: $\log(SFR_{FUV}) (M_\odot/yr)$, FUV derived integral star formation rate
3. column: Log K band luminosity, $\log(KLum)$ [solLum]
4. column: Log hydrogen mass, $\log(MHI)$ [solMass]

For the measurements with "99999", we don't have them, so we can replace them with NaN

#+begin_src python :session foo :results output

df = pd.read_csv('Karachentsev_updated.txt', delimiter= '\s+', header=None)
df.columns=["log_SFR_Ha","log_SFR_FUV","log_K", "log_MHI"]

print(df)

df = df.replace(99999,np.nan)
print(df)

df['SFR_Ha']=10**df['log_SFR_Ha']

df['SFR_FUV']=10**df['log_SFR_FUV']

df['K']=10**df['log_K']

df['MHI']=10**df['log_MHI']

print(df)
#+end_src

#+RESULTS:
#+begin_example
     log_SFR_Ha  log_SFR_FUV  log_K  log_MHI
0      99999.00        -3.07   6.43     7.05
1         -2.29        -2.03   7.58     7.92
2         -2.68        -2.23   7.70     7.84
3         -1.47        -1.72   8.10     8.10
4         -4.64        -3.53   6.39     6.64
..          ...          ...    ...      ...
832       -2.18        -1.84   8.03     8.22
833       -3.57        -3.27   6.63     6.49
834       -2.06        -1.60   8.47     8.64
835       -2.23        -1.79   7.95     7.90
836       -0.45        -0.42   9.70     8.70

[837 rows x 4 columns]
     log_SFR_Ha  log_SFR_FUV  log_K  log_MHI
0           NaN        -3.07   6.43     7.05
1         -2.29        -2.03   7.58     7.92
2         -2.68        -2.23   7.70     7.84
3         -1.47        -1.72   8.10     8.10
4         -4.64        -3.53   6.39     6.64
..          ...          ...    ...      ...
832       -2.18        -1.84   8.03     8.22
833       -3.57        -3.27   6.63     6.49
834       -2.06        -1.60   8.47     8.64
835       -2.23        -1.79   7.95     7.90
836       -0.45        -0.42   9.70     8.70

[837 rows x 4 columns]
     log_SFR_Ha  log_SFR_FUV  log_K  log_MHI    SFR_Ha   SFR_FUV             K           MHI
0           NaN        -3.07   6.43     7.05       NaN  0.000851  2.691535e+06  1.122018e+07
1         -2.29        -2.03   7.58     7.92  0.005129  0.009333  3.801894e+07  8.317638e+07
2         -2.68        -2.23   7.70     7.84  0.002089  0.005888  5.011872e+07  6.918310e+07
3         -1.47        -1.72   8.10     8.10  0.033884  0.019055  1.258925e+08  1.258925e+08
4         -4.64        -3.53   6.39     6.64  0.000023  0.000295  2.454709e+06  4.365158e+06
..          ...          ...    ...      ...       ...       ...           ...           ...
832       -2.18        -1.84   8.03     8.22  0.006607  0.014454  1.071519e+08  1.659587e+08
833       -3.57        -3.27   6.63     6.49  0.000269  0.000537  4.265795e+06  3.090295e+06
834       -2.06        -1.60   8.47     8.64  0.008710  0.025119  2.951209e+08  4.365158e+08
835       -2.23        -1.79   7.95     7.90  0.005888  0.016218  8.912509e+07  7.943282e+07
836       -0.45        -0.42   9.70     8.70  0.354813  0.380189  5.011872e+09  5.011872e+08

[837 rows x 8 columns]
#+end_example

Now we have to calculate the total SFR from the equation:

\begin{equation}
SFR_o=\frac{SFR_{FUV}+SFR_{Ha}}{2}
\end{equation}
if we have both the SFR. If we only have one of them then:

\begin{equation}
    SFR_o=SFR_i,\ \text{if } SFR_j=0,\ i\neq j,\ i,j=SFR_{FUV},\, SFR_{Ha}
\end{equation}

For that we can use the .mean() function of Pandas which calculates the mean $\sum_0^N x_i/N$. We will not have a problem with the NaN values, since the function will ignore them.

We can also calculate the Mass of each galaxy from the K-band luminosity using a mass-to-light ratio of 0.6 ($M_\odot/Lum$)

#+begin_src python :session foo :results output
df['SFR_0']=df[ ['SFR_Ha','SFR_FUV']].mean(axis=1, skipna=True)
df['log_SFR_0']= np.log10(df['SFR_0'])
print(df)

df=df[(df.SFR_0>=10**(-3))]

df['Mass']=0.6*df['K']
df=df[ ['log_SFR_Ha', 'log_SFR_FUV', 'log_SFR_0', 'log_K', 'log_MHI', 'SFR_Ha', 'SFR_FUV','SFR_0', 'K', 'MHI', 'Mass']]
print(df)
#+end_src

#+RESULTS:
#+begin_example
     log_SFR_Ha  log_SFR_FUV  log_K  log_MHI  ...             K           MHI     SFR_0  log_SFR_0
0           NaN        -3.07   6.43     7.05  ...  2.691535e+06  1.122018e+07  0.000851  -3.070000
1         -2.29        -2.03   7.58     7.92  ...  3.801894e+07  8.317638e+07  0.007231  -2.140827
2         -2.68        -2.23   7.70     7.84  ...  5.011872e+07  6.918310e+07  0.003989  -2.399151
3         -1.47        -1.72   8.10     8.10  ...  1.258925e+08  1.258925e+08  0.026470  -1.577254
4         -4.64        -3.53   6.39     6.64  ...  2.454709e+06  4.365158e+06  0.000159  -3.798562
..          ...          ...    ...      ...  ...           ...           ...       ...        ...
832       -2.18        -1.84   8.03     8.22  ...  1.071519e+08  1.659587e+08  0.010531  -1.977544
833       -3.57        -3.27   6.63     6.49  ...  4.265795e+06  3.090295e+06  0.000403  -3.394595
834       -2.06        -1.60   8.47     8.64  ...  2.951209e+08  4.365158e+08  0.016914  -1.771747
835       -2.23        -1.79   7.95     7.90  ...  8.912509e+07  7.943282e+07  0.011053  -1.956509
836       -0.45        -0.42   9.70     8.70  ...  5.011872e+09  5.011872e+08  0.367501  -0.434741

[837 rows x 10 columns]
     log_SFR_Ha  log_SFR_FUV  log_SFR_0  log_K  ...     SFR_0             K           MHI          Mass
1         -2.29        -2.03  -2.140827   7.58  ...  0.007231  3.801894e+07  8.317638e+07  2.281136e+07
2         -2.68        -2.23  -2.399151   7.70  ...  0.003989  5.011872e+07  6.918310e+07  3.007123e+07
3         -1.47        -1.72  -1.577254   8.10  ...  0.026470  1.258925e+08  1.258925e+08  7.553552e+07
5         -1.51        -1.63  -1.565868   8.15  ...  0.027173  1.412538e+08  3.801894e+08  8.475225e+07
7         -1.01        -0.60  -0.758314   9.48  ...  0.174456  3.019952e+09  4.365158e+08  1.811971e+09
..          ...          ...        ...    ...  ...       ...           ...           ...           ...
831         NaN        -2.89  -2.890000   7.15  ...  0.001288  1.412538e+07  7.244360e+06  8.475225e+06
832       -2.18        -1.84  -1.977544   8.03  ...  0.010531  1.071519e+08  1.659587e+08  6.429116e+07
834       -2.06        -1.60  -1.771747   8.47  ...  0.016914  2.951209e+08  4.365158e+08  1.770726e+08
835       -2.23        -1.79  -1.956509   7.95  ...  0.011053  8.912509e+07  7.943282e+07  5.347506e+07
836       -0.45        -0.42  -0.434741   9.70  ...  0.367501  5.011872e+09  5.011872e+08  3.007123e+09

[586 rows x 11 columns]
#+end_example

To calculate the average Star Formation Rate $\overline{SFR}$ we can use the equation

\begin{equation}
    \overline{SFR}=\frac{\zeta M_*}{t_{sf}}
\end{equation}
where ζ is the mass-loss through stellar evolution and we assume that $\zeta\approx 1.3$ (see explanation in the paper`), M* is the mass of each galaxy and we assume that $t_{sf}=12.5\ Gyr$

#+begin_src python :session foo :results output
df['av_SFR']=df['Mass']*1.3/(12.5*10**9)
df['ratio']=df['av_SFR']/df['SFR_0']
df['log_ratio']=np.log10(df['ratio'])
print(df)
#+end_src

#+RESULTS:
#+begin_example
     log_SFR_Ha  log_SFR_FUV  log_SFR_0  log_K  ...          Mass    av_SFR     ratio  log_ratio
1         -2.29        -2.03  -2.140827   7.58  ...  2.281136e+07  0.002372  0.328104  -0.483988
2         -2.68        -2.23  -2.399151   7.70  ...  3.007123e+07  0.003127  0.784034  -0.105665
3         -1.47        -1.72  -1.577254   8.10  ...  7.553552e+07  0.007856  0.296783  -0.527561
5         -1.51        -1.63  -1.565868   8.15  ...  8.475225e+07  0.008814  0.324379  -0.488947
7         -1.01        -0.60  -0.758314   9.48  ...  1.811971e+09  0.188445  1.080185   0.033498
..          ...          ...        ...    ...  ...           ...       ...       ...        ...
831         NaN        -2.89  -2.890000   7.15  ...  8.475225e+06  0.000881  0.684202  -0.164815
832       -2.18        -1.84  -1.977544   8.03  ...  6.429116e+07  0.006686  0.634934  -0.197271
834       -2.06        -1.60  -1.771747   8.47  ...  1.770726e+08  0.018416  1.088759   0.036932
835       -2.23        -1.79  -1.956509   7.95  ...  5.347506e+07  0.005561  0.503146  -0.298306
836       -0.45        -0.42  -0.434741   9.70  ...  3.007123e+09  0.312741  0.850992  -0.070074

[586 rows x 14 columns]
#+end_example

To calculate the variables A, τ we will use the equations, (i need to find the values of A, τ so i can create a plot A(τ))

\begin{equation}
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}
\end{equation}

\begin{equation}
    \overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
\end{equation}

if we divide them we get:

\begin{equation}
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}
\end{equation}


#+begin_src python :session foo :results output
for i in df.index:
    def sfrx(z):
        A = z[1]
        x = z[0]

        sfr=df.loc[i]['SFR_0']
        ratio=df.loc[i]['ratio']
        f=np.zeros(2)
        f[0]=ratio-(np.exp(x)-x-1)/x**2
        f[1]=sfr-A*x*np.exp(-x)/x
        return f

    #for i in df.index:
    z = fsolve(sfrx,[3.0,4.0])
    #df.at[i,'A_del']=z[1]
    #df.at[i,'x']=z[0]
    print(z)

print(df)
#+end_src

** *EDV EXEI GINEI MALAKIA KAI MPU BGAINOYN ARNTIKA PU DEN THE EPREPE. BALE TON ALLO TYPO ANTI GIA TO RATIO*

#+RESULTS:
#+begin_example
[-1.42072015  0.00174647]
[1.21951242 0.01350445]
[-1.81570214  0.00430721]
[-1.46437784  0.0062829 ]
[1.96548944 1.24533898]
[-0.58837595  0.178566  ]
[-1.05038152  0.18173651]
[4.25482544 0.55797707]
[0.69256392 0.08332526]
[1.05579791 0.00599613]
[2.01357187 0.02670965]
[-1.31769496  0.00260051]
[2.60507409 0.02827283]
[-0.2956923   0.00169653]
[ 4.59600367 75.02259367]
[2.44757616 0.02731867]
[-0.20511291  0.34381551]
[  3.9283617  101.83692581]
[1.7157284  0.25417415]
[1.02990293 0.6181094 ]
[2.1141942  0.05626971]
[2.22265629 0.05074608]
[0.44088772 0.00390369]
[0.07520568 0.005223  ]
[5.09550815 3.06254293]
[0.66918874 0.00247976]
[2.21629769 0.16365846]
[-1.34078721  0.0017689 ]
[1.65177188 0.07752597]
[1.55592531 0.02117043]
[0.09146802 0.55283554]
[1.97404741 0.01016993]
[2.22895103 0.43336185]
[ 2.80121098 25.34414704]
[0.56801085 0.00336267]
[4.19702628 0.10874631]
[1.33673142 0.00389525]
[0.9502709  0.07762911]
[2.70101731 0.0225059 ]
[3.29288712 0.05197359]
[0.48730072 0.058127  ]
[-6.09820119e+00  1.04607935e-05]
[2.45614544 1.65339559]
[1.80596416 1.68681011]
[2.34168554 0.18732632]
[0.99438242 0.11007811]
[2.78906848 0.20954488]
[1.33673142 0.42710542]
[3.84270592 2.41022073]
[3.31107784 0.5241154 ]
[  5.68619784 197.14825511]
[2.51141203 0.08141274]
[-1.1137656   0.00615975]
[1.11083088 3.48557059]
[0.7687246  0.00282764]
[1.2807732  0.04531403]
[2.82972212 0.07585218]
[4.21128908 1.19933252]
[2.14784575 0.25592113]
[  8.29909687 698.63763068]
[-7.65715574e+00  5.42674625e-05]
[-1.51646290e+00  1.35334502e-03]
[-9.47006965e+00  1.80801074e-07]
[-0.11134785  0.00094152]
[4.51762945 1.2358949 ]
[1.00035321 0.20103766]
[  6.04492775 101.22289713]
[0.50477838 0.00323015]
[-0.62101942  0.00089514]
[-0.88305365  0.1385235 ]
[1.0019791  0.00450512]
[3.23431337 1.56310449]
[2.63490206 0.05103908]
/usr/lib/python3/dist-packages/scipy/optimize/minpack.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
[3. 4.]
[-1.24853792  0.19365394]
[0.85004773 0.05798325]
[0.81235432 0.00781958]
[2.9591768  0.15752126]
[-0.68580109  0.13556899]
[-1.09834793  0.01796413]
[0.87483699 0.00758467]
[  7.91272472 383.05040888]
[-1.53513865  0.00393903]
[2.37709837 0.05377909]
[2.12458845 0.60631322]
[3.35980495 0.99803265]
[3.00499924 4.11839285]
[3.31675031 0.42713138]
[-7.35930105e+00  5.00381255e-05]
[-2.03467109  0.07278696]
[-2.48080920e+00  2.25215489e-03]
[0.5217429  0.06980994]
[3.40216348 9.94353542]
[-2.58612587  0.00788606]
[2.87948414 0.10012536]
[-0.98288024  0.16615829]
[1.43931843 0.16847371]
[2.24752953 0.52616076]
[2.18724245 0.6415556 ]
[1.05197658 0.01537686]
[0.2451016  0.38587467]
[-0.31037383  0.05691233]
[-2.98371857e+00  2.04393890e-03]
[-0.3835842   0.16726747]
[-1.00425927  0.03340841]
[-0.60879085  0.00473811]
[2.27203833 0.03773408]
[3.14486388 0.99036898]
[2.51141203 0.26958293]
[1.7681712  0.86677623]
[1.2807732  0.01683576]
[0.50477838 0.00203809]
[4.4037616  0.74564028]
[-0.16659947  1.11595522]
[4.77895583 4.22157146]
[1.92314621 0.01928465]
[0.44088772 0.14503576]
[-0.60879085  0.02374682]
[-0.53276824  0.01171175]
[3.93570626 2.94615445]
[0.66597351 0.02713515]
[1.7157284  0.40283888]
[0.37632263 1.10518464]
[3.56961913 0.47892322]
[0.44088772 0.00491445]
[1.69890961 0.03990414]
[0.99347839 0.03399869]
[6.93119135 1.09692808]
[0.93443614 0.01887211]
[4.21128908 1.19933252]
[1.74064172 0.08340846]
[0.80593086 0.45862255]
[1.70059263 0.0958142 ]
[3.67167726 0.25694974]
[0.14270573 0.01850482]
[-1.36911998  0.02391466]
[2.36871233 0.07563428]
[0.46390883 1.2242831 ]
[1.92649892 0.01644415]
[1.51102847 0.09430449]
[1.80209335 0.20707608]
[1.5112906  0.04117162]
[0.38112731 0.00715782]
[-2.75031639e+00  2.51658588e-03]
[0.5589196  0.03267231]
[1.63614598 2.16569828]
[2.04282942 0.021065  ]
[2.36177421 3.52492267]
[-3.29632636  0.03248551]
[2.23069396 0.7537919 ]
[1.89439143 1.28333731]
[2.07476107 0.1448963 ]
[-0.9217849   0.00268856]
[1.33673142 0.01952248]
[2.99739578 0.16044708]
[-3.70180611e+00  1.69330364e-04]
[-1.08662078  0.21285634]
[-4.00758293e+00  7.40702763e-05]
[-0.45770764  0.00347712]
[3.40216348 0.22779324]
[1.84594347 0.00770392]
[ 4.66082355 92.47182319]
[0.6260864  0.15945221]
[1.87187179 0.00856926]
[-0.23805314  0.00433127]
[5.14007263 1.21068138]
[1.90644146 0.72647889]
[-0.81437544  0.00102975]
[3.31724151 0.25743031]
[  8.1734263  263.70479462]
[8.17781488 5.03013775]
[1.9287191  0.47483285]
[1.15912616 0.00451696]
[4.44830564 0.38920252]
[0.98517133 5.11996602]
[ 9.74782515 91.89096917]
[1.17114356 0.12822265]
[1.84449791 0.19786267]
[-1.94508426e+00  4.69536596e-04]
[1.90644387 0.06327375]
[1.61619332 0.03393696]
[6.32771409 1.29837429]
[-0.60377042  0.00161113]
[0.43160603 0.09096791]
[4.88919978 0.80048369]
[ 3.59392906 60.94738724]
[3.14486388 0.04323117]
[2.61750602 0.17542658]
[1.66287912 0.01387328]
[1.7157284 0.0350858]
[-1.42797908  0.01022908]
[1.30535485 0.01181751]
[4.36474401 0.1976026 ]
[0.89707124 0.02488133]
[3.48931659 0.0451508 ]
[-3.94850565e+00  1.99895427e-05]
[1.05197658 0.00735983]
[1.84271898 0.06853865]
[3.21604705 0.05892382]
[3.67006129 2.62748487]
[2.02458318 0.04669445]
[0.02391296 0.00247247]
[-2.4730805   0.00531146]
[1.66226832 0.24662045]
[0.83080771 0.16909944]
[4.10095655 0.19919368]
[  4.88751563 139.02132528]
[ 3.5517506  35.22161567]
[4.02125538 0.09882855]
[-2.43606468  0.00534233]
[2.27203833 0.03861301]
[0.74470475 0.01134824]
[1.44723556 0.03455624]
[2.12458845 0.01789357]
[-0.60879085  0.00076843]
[2.67033786 0.04033039]
[1.39221537 0.01134048]
[1.58266901 0.02357074]
[4.40506186 0.0961066 ]
[1.28690335 0.08867551]
[1.23915727 0.10364316]
[4.36971945 4.74956389]
[-1.01239569e+01  1.81518713e-07]
[-0.68580109  0.01452648]
[-0.2840332   0.17499184]
[2.09663966 0.15352416]
[2.35490791 0.13353509]
[8.65953099 8.72773686]
[0.09146802 0.06801363]
[-0.58837595  0.03906599]
[0.04277606 0.0010437 ]
[0.56801085 0.01685326]
[-2.09309771e+00  1.02959300e-03]
[3.97553875 0.2272765 ]
[3.73406929 0.05031363]
[ 3.42217514 28.28073997]
[-1.60488259  0.00620661]
[-0.27857255  0.00319621]
[-0.09635001  0.00189761]
[1.60961447 0.01545421]
[0.2734279  0.82123488]
[4.32674471 0.5360391 ]
[0.30179149 0.17477487]
[0.40008278 0.00346806]
[5.03299984 0.40389122]
[2.12098918 0.01027682]
[1.13137117 0.01065685]
[-0.56405918  0.0574333 ]
[1.2807732  0.02668288]
[1.05197658 0.38624923]
[1.04929536 0.01062095]
[3.06802285 0.66068832]
[-1.30327771  0.00536595]
[2.78906848 0.03901908]
[4.09409424 3.61445264]
[3.79992636 0.43059724]
[3.14486388 0.12758424]
[4.0547302  0.15883527]
[-1.10477008  0.04003036]
[3.4862801  0.05547179]
[ 2.8987054  14.27614406]
[ 4.77362347 66.77323462]
[  6.08105896 158.5732137 ]
[2.7472534  0.13252263]
[1.92314621 0.06098342]
[  9.4325509  133.29254446]
[3.82602443 2.28532781]
[3.19584855 0.20710574]
[-2.07658212e+00  5.22578870e-04]
[  8.55763882 104.87947093]
[2.34884506 1.10718956]
[-1.52934958  0.1850359 ]
[-0.35718913  0.00743504]
[3.06214503 0.43529269]
[-0.3835842   0.00349471]
[-1.88841474e+00  4.17188426e-04]
[3.05734588 0.04342986]
[-0.80810716  0.00749308]
[  9.0042095  171.63665257]
[1.51498786 0.02116031]
[-1.41852131e+01  2.55981970e-08]
[  4.17120222 145.15430656]
[ 3.1203761  24.59117022]
[-1.61935595  0.00415113]
[ 5.97620404 61.0653888 ]
[1.2243299  0.00619041]
[4.01521254 0.08199449]
[1.54813651 7.14152941]
[  5.90964541 279.5930636 ]
[0.50477838 0.01094517]
[3.7902371  0.04701712]
[  4.12051857 138.92614813]
[  5.24978496 162.16332453]
[-3.78382039e+00  3.30810723e-04]
[2.78906848 0.02297614]
[-1.08662078e+00  3.61481927e-04]
[-0.23694738  0.00719352]
[1.55592531 0.00804877]
[1.93094078 0.33656606]
[-1.16884746  0.0014867 ]
[2.87948414 0.03552582]
[2.32452966 0.16931812]
[-0.43002868  0.002452  ]
[1.33673142 0.06926839]
[2.60507409 0.03642246]
[1.39221537 0.09652314]
[3.93570626 0.88972442]
[-0.76382539  0.04248884]
[0.37632263 0.05051668]
[0.56801085 0.00286209]
[0.79489357 0.04154161]
[3.32375268 1.87051346]
[1.99624139 0.14878998]
[1.2243299  0.01554962]
[2.36871233 0.03537681]
[0.93443614 0.08827149]
[2.20466089 0.81518513]
[4.62899615 0.10982727]
[1.28934694 0.49937828]
[-1.42797908  0.01071116]
[ 8.7037446  47.34747756]
[3.25461926 0.06577902]
[-0.45770764  0.01416511]
[1.81288809 0.03011202]
[-0.29135136  0.00589996]
[1.56223163 0.0064165 ]
[2.22134605 0.03936415]
[3.44708111 0.03770439]
[-2.42910877  0.00851295]
[1.76276019 0.48595087]
[2.22895103 0.27980191]
[-0.09018894  0.04570929]
[-0.35213363  0.09392679]
[1.54464006 0.01030197]
[1.23808384 1.10984982]
[4.35613521 0.13941238]
[1.63890624 1.13835679]
[2.96958166 2.03947828]
[0.72505573 0.72377556]
[4.64752033 0.94145009]
[2.91788459 0.02082853]
[1.82021619 0.00813785]
[4.21128908 0.30827592]
[ 3.18629054 63.7160368 ]
[2.12458845 0.04706489]
[  9.39838106 564.50141425]
[-0.8416666   0.02980678]
[2.04322648 0.03116411]
[5.02851067 0.88217764]
[0.99347839 0.01825838]
[-2.17517655e+00  1.97393492e-04]
[-0.85439641  0.00089204]
[3.35980495 1.51058354]
[-1.08662078e+00  6.57788974e-04]
[3.73406929 0.12932595]
[2.60507409 0.1956002 ]
[0.46874182 0.00294595]
[3.05602691 0.16125584]
[4.21128908 0.08297354]
[0.98062447 0.68875507]
[-7.06904213e+00  2.88854203e-05]
[0.82933456 0.02616656]
[3.47128376 0.10026255]
[0.52837422 0.00967722]
[-0.02940067  0.58572236]
[1.71855454 0.01569719]
[0.87304135 0.01120616]
[0.98498609 0.12859323]
[1.43217303 0.19712004]
[3.78960793 4.59344029]
[3.29308896 0.11371643]
[3.430948   0.18332387]
[1.78709941 0.05278363]
[1.90483645 0.02459458]
[-2.09459937  0.02704995]
[1.15930641 4.95328122]
[3.18738191 0.04835827]
[0.62160148 0.01483892]
[-0.57300415  0.01467088]
[0.44088772 0.00252043]
[0.17806747 0.06417781]
[0.37632263 0.00311483]
[ 3.55041799 16.84810838]
[-0.69888702  0.11971914]
[1.11471339 0.04398321]
[0.33908721 0.08184325]
[1.28626836 0.01540427]
[-0.69573356  0.00250684]
[0.23288904 0.0236038 ]
[-2.07708258  0.0185347 ]
[-3.02591971e+00  6.39528300e-04]
[1.42036622 0.00937025]
[-0.45770764  0.01002813]
[0.84049587 3.39423479]
[2.41312228 2.08319714]
[4.92414353 0.26239909]
[1.72949965 0.22829354]
[1.92314621 0.00733182]
[0.64688614 0.0867602 ]
[1.55592531 0.01720798]
[2.60507409 0.02700034]
[-1.17379254  0.00199831]
[3.29486358 0.03682808]
[3.18828457 0.04412192]
[2.30364147 0.14926209]
[2.41658093 0.01200903]
[-6.97215026e+00  2.93597785e-06]
[1.7157284  0.00623924]
[-3.14076595  0.01761906]
[-1.40668479  0.00267089]
[2.07476107 0.07262017]
[3. 4.]
[2.79600614 3.18246348]
[0.91110357 0.00323306]
[1.79049903 1.13063652]
[6.94665212 6.48735952]
[1.66043625 1.45070349]
[3.05734588 0.03074599]
[0.99347839 0.00710333]
[2.85373303 2.37180875]
[ 9.05880836 16.21195374]
[-0.39970149  2.94168972]
[0.65783514 0.02960133]
[0.11097507 0.00534805]
[-0.09635001  0.00307756]
[-0.89019551  0.57452966]
[0.23635382 0.1106535 ]
[-4.92356816e+00  1.76595855e-04]
[-1.51748918  0.00381134]
[2.697612   0.03728705]
[3.23467558 0.16370473]
[2.47565261 0.04495039]
[2.17218562 0.124094  ]
[0.32220252 0.03533718]
[0.91592669 0.00347454]
[2.46414551 0.13494749]
[2.41658093 0.06302426]
[0.04277606 0.0406048 ]
[2.1740725 0.0326729]
[0.5125966  0.03100181]
[5.93387139 1.51324636]
[0.42320318 0.11927361]
[1.50180223 0.00503761]
[0.31106634 0.00156709]
[1.50180223 0.00591867]
[4.85256355 0.52172491]
[ 5.27510843 65.13619414]
[-0.09599083  0.00510872]
[1.70684481 0.00918247]
[0.99280182 0.07265801]
[-0.68580109  0.00276796]
[-0.06280431  0.03147628]
[-1.55494921  0.00161807]
[1.50180223 0.03178516]
[0.04277606 0.00165416]
[-0.60879085  0.002855  ]
[2.6105202  0.07630694]
[ 6.1209236  73.39471814]
[3.65220708 0.28584684]
[-3.94984084e+00  4.36842695e-05]
[1.51498786 0.02116031]
[-3.52808083  0.01202901]
[2.46414551 0.0147967 ]
[-1.36795118  0.004667  ]
[3.48852757 0.09215339]
[-0.09635001  0.0642994 ]
[2.13461289 0.01396466]
[ 3.97553875 49.72268146]
[1.28734771 0.14057806]
[1.45667589 0.05258987]
[1.44326371 0.03868353]
[2.9036145  0.04033183]
[3.97553875 0.67074052]
[6.86464246 2.14783642]
[1.28446128 0.28653522]
[1.55034203 0.05062212]
[-0.53503343  0.00134257]
[0.92586423 0.06216441]
[0.89707124 0.02991393]
[1.37456219 0.01585461]
[  4.54451455 136.93973575]
[-0.60879085  0.00136649]
[1.48120586 1.68680051]
[0.37632263 0.00290693]
[ 7.43792616 17.38802628]
[  5.67581766 159.69644446]
[3.74916551 0.17560412]
[1.55530474 0.07337961]
[-0.03791732  0.0019285 ]
[1.66287912 0.01629969]
[-0.13554949  0.07884037]
[ 3.55606386 84.65340502]
[ 6.22605334 95.46849196]
[1.7681712  0.01282056]
[0.5057561  0.05616855]
[0.59776401 0.01926924]
[3.44432069 4.85120326]
[1.92255808 0.02371764]
[ 3.29001214 58.23793569]
[0.61347726 0.00757139]
[4.19522766 0.32069763]
[2.28503258 0.04567768]
[1.63614598 0.01886244]
[1.19240835 0.00962661]
[-0.10195661  0.14014264]
[4.00433407 0.17856902]
[-1.88405106e+00  1.78552945e-04]
[4.2216665  0.91363699]
[-1.06494339  0.00462256]
[2.81492501 0.02381277]
[-1.25485253  0.00375859]
[3.27249537 0.89471978]
[2.09327359 0.01532463]
[2.27203833 0.20264398]
[ 2.26699909 29.89375953]
[-5.14776949e+00  8.59710277e-04]
[-9.23687097e+00  6.59090200e-07]
[0.55911791 0.29122887]
[-0.59712193  0.0151059 ]
[ 3.44432069 34.34388897]
[1.19361719 0.01424906]
[0.29671406 0.1625722 ]
[2.38127661 0.04380834]
[0.99347839 0.01152026]
[4.08537088 0.14011139]
[-5.65125732e+00  6.56548204e-05]
[2.02458318 0.03230467]
[2.02458318 0.0141015 ]
[-2.59101715e+00  6.24016259e-04]
[1.60961447 0.50008829]
[1.75855462 0.17602325]
[2.12458845 0.3738497 ]
[-0.16659947  0.0067243 ]
[2.57142417 0.10091806]
[0.76142451 0.03710664]
[1.2243299  0.11795591]
[4.59290203 4.83806846]
[1.92736958 0.01762865]
/usr/lib/python3/dist-packages/scipy/optimize/minpack.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last five Jacobian evaluations.
  warnings.warn(msg, RuntimeWarning)
[-1.40848296 10.92113606]
[0.29302422 0.07943369]
[2.98973032 6.97801626]
[1.25245042 0.47748649]
[0.25325975 0.01654849]
[-2.31726318e+00  1.65103745e-03]
[-0.3835842   0.00650746]
[ 2.98973032 56.71944555]
[3.74118733 0.20092305]
[1.16739038 0.00344343]
[3.38088768 0.07300114]
[-2.69158173  0.00380984]
[1.85057677 0.0928596 ]
[4.09409424 0.06887198]
[2.02458318 0.02184064]
[1.57931752 0.27640236]
[4.01521254 0.17938439]
[2.83440395 0.05635935]
[4.21128908 0.1617855 ]
[ 2.81570467 62.65800084]
[2.41658093 0.13167635]
[4.44184804 0.22859677]
[5.67001799 8.36483784]
[1.87820336 0.73191811]
[3.44432069 2.11762703]
[0.63060093 0.08587495]
[2.60025345 6.17036798]
[3.09521753 0.37636299]
[-0.02620588  0.00773783]
[3.22246644 7.97243879]
[2.12458845 0.05529642]
[2.29436224 0.07976892]
[-0.31037383  0.00421897]
[1.87187179 0.06352484]
[-0.16659947  0.33701309]
[1.87187179 2.30644759]
[1.2807732  0.18890034]
[3.24809234 0.03067404]
[-0.0013418   0.01844277]
[3.19985257 1.8071971 ]
[0.99438242 1.293305  ]
[1.05197658 0.6559453 ]
[3.14285963 0.5961931 ]
[0.87483699 0.00308985]
[0.67740406 0.02073236]
[1.98290342 0.12286177]
[0.01878629 0.01126288]
[1.41835768 1.5179026 ]
     log_SFR_Ha  log_SFR_FUV  log_SFR_0  log_K  ...     ratio  log_ratio     A_del         x
1         -2.29        -2.03  -2.140827   7.58  ...  0.328104  -0.483988  0.001746 -1.420720
2         -2.68        -2.23  -2.399151   7.70  ...  0.784034  -0.105665  0.013504  1.219512
3         -1.47        -1.72  -1.577254   8.10  ...  0.296783  -0.527561  0.004307 -1.815702
5         -1.51        -1.63  -1.565868   8.15  ...  0.324379  -0.488947  0.006283 -1.464378
7         -1.01        -0.60  -0.758314   9.48  ...  1.080185   0.033498  1.245339  1.965489
..          ...          ...        ...    ...  ...       ...        ...       ...       ...
831         NaN        -2.89  -2.890000   7.15  ...  0.684202  -0.164815  0.003090  0.874837
832       -2.18        -1.84  -1.977544   8.03  ...  0.634934  -0.197271  0.020732  0.677404
834       -2.06        -1.60  -1.771747   8.47  ...  1.088759   0.036932  0.122862  1.982903
835       -2.23        -1.79  -1.956509   7.95  ...  0.503146  -0.298306  0.011263  0.018786
836       -0.45        -0.42  -0.434741   9.70  ...  0.850992  -0.070074  1.517903  1.418358

[586 rows x 16 columns]
#+end_example
