#+title: Reaserch Project Notes
#+subtitle:Constraints on the star formation histories of galaxies in the Local Cosmological Volume
#+PROPERTY: header-args:python :tangle main.py
#+startup: preview


#+begin_src python :session foo
import numpy as np
import pandas as pd
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
import seaborn as sns
#+end_src
#+RESULTS:

* Tasks
** DONE Delete flags
** DONE Calculate SFR_0
** DONE Delete galaxies with $SFR_0<10^{-3}M_\odot yr^{-1}$
** DONE Calculate Mass of galaxies
** DONE Calculate $\overline{SFR}$
** TODO for $t_{sf}=12.5 Gyr$ calculate A, τ
** TODO for non constant t_sf try to find a relation t_sf=t_sf(Mass)



* Introduction

** The tension between the delayed-τ model and the obserations
From the delayed-τ model we are expecting $Ds=\overline{SFR}/SFR_0>1$ and for the galaxies documented in the Catalogue of Neighouring Galaxies we are expecting $Ds\approx 2$ but we observe $Ds\approx 1$ and even $Ds=0.85<1$, for the plausible assumption that the galaxies have been forming stars for $t_{sf}=12$ Gyr

We also expect by the model that the Star Formation Time-scale $\tau\approx 6.7$ Gyr, much longer than the 3.5-4.5 Gyr estimated by SP14.

** What is the point of this project?

I will try to calculate the values $A_{del},\ \tau,\ t_{sf}$, from the equations

$$
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}
$$

$$
    \overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
$$

where

$$
x\equiv\frac{t_{sf}}{\tau}
$$

for the delayed τ model

If we assume that SFH is a power law:



* Data/Karachentsev list

** Original data set

The data I will use for this project come from the Karachentsev  catalog (2022-12-02), which is an updated version of the list used in Kroupa et al. 2020
From the list I use the tables "Catalog of Nearby Galaxies", "Global Parameters of the Nearby Galaxies" and "List of the nearby galaxies with measured SFR"

Because this files include text as well, I create a script to get rid of the text and only keep the data'

#+begin_src shell
FIRST_GALAXY="AGC102728"
cd ./list
rm new_*.dat
for f in lvg*.dat
         do
             sed $f -e/$FIRST_GALAXY/\{ -e:1 -en\;b1 -e\} -ed > "new_"$f
         done
#+end_src

#+RESULTS:

We also want to keep the labels

#+begin_src shell
 FIRST_GALAXY="AGC102728"
 cd ./list
 rm label_*.dat
 for f in lvg*.dat
          do
              sed '/Note/Q' $f > "label_"$f
              sed "label_"$f -i -e/'Bytes'/\{ -e:1 -en\;b1 -e\} -ed
              sed '/--------/d' "label_"$f -i
          done
 #+end_src

 #+RESULTS:
Because we have a problem with the spaces I will create tabs between columns in VIM from the ~new_lvg*~ files to the ~newlist*~


After we have created the labels and tables files we want to put create a row with the labels and add it to the tables file.

#+begin_src shell :results output
cd ./list
for f in labels_*.dat
         do
            file="new_"$f
            touch $file
            sed '/RAh/d' $f > $file
            sed '/RAm/d' $f > $file
            sed '/RAs/d' $f > $file
            sed '/DE-/d' $f > $file
            sed '/DEd/d' $f > $file
            sed '/DEm/d' $f > $file
            sed 's/DEs/time/g' $f > $file
            sed '/_/d' $f > $file
            awk -v RS= -v OFS="," -F'\n' '/----/{next}$1=$1' $f > $file
         done
#+end_src

#+RESULTS:

#+begin_src shell
cd list
#For list 1
sed 's/\t/,/g' newlist1.dat > list1.dat
paste -sd'\n' labels_1.dat list1.dat> final_list1.dat
sed -i 's/\s//g' final_list1.dat

sed 's/\t/,/g' newlist2.dat > list2.dat
paste -sd'\n' labels_2.dat list2.dat> final_list2.dat
sed -i 's/\s//g' final_list2.dat


sed 's/\t/,/g' newlist7.dat > list7.dat
paste -sd'\n' labels_7.dat list7.dat> final_list7.dat
sed -i 's/\s//g' final_list7.dat

#+end_src

#+RESULTS:

Now we clear the directory:

#+begin_src shell
cd ./list

rm new_lvg*
rm label_*
rm list*.dat
rm new_label*
#+end_src

#+RESULTS:

We will now create the final list with only the columns we need, using python

#+begin_src python :results output
import numpy as np
import pandas as pd

df1= pd.read_csv("./list/final_list1.dat")
df2= pd.read_csv("./list/final_list2.dat")
df7= pd.read_csv("./list/final_list7.dat")

#If we keep the Kmag of df1 when we apply the flags most of the rows get dropped

df1=df1[["Name", "FUVmag", "Bmag", "TType", "Tdw1", "Tdw2", "Dis"]]
df2=df2[["Name","AB","BMag","SBB", "logKLum","logM26", "logMHI"]]
df7=df7[["Name","BMag","SFRHa","SFRFUV"]]

df1.rename(columns = {"Bmag":"B1"}, inplace=True)
df2.rename(columns = {"BMag":"B2"}, inplace=True)
df7.rename(columns = {"BMag":"B7"}, inplace=True)

df=pd.merge(pd.merge(df1,df2,on='Name'),df7, on='Name')

#we put the astype, because some of the columns are not strings and this fixes the errors
for col in df.columns:
    df=df[df[col].astype(str).str.contains(">|<|\*")==False]

df.to_csv("Karachentsev_list.csv",index=False)

#+end_src

#+RESULTS:

** Calculations for values that we need
Now we have to calculate the total SFR from the equation:

$$
    SFR_o=\frac{SFR_{FUV}+SFR_{Ha}}{2}
$$

if we have both the SFR. If we only have one of them then:

$$
    SFR_o=SFR_i,\ \text{if } SFR_j=0,\ i\neq j,\ i,j=SFR_{FUV},\, SFR_{Ha}
$$

For that we can use the .mean() function of Pandas which calculates the mean $\sum_0^N x_i/N$. We will not have a problem with the NaN values, since the function will ignore them.

We can also calculate the Mass of each galaxy from the K-band luminosity using a mass-to-light ratio of 0.6 ($M_\odot/Lum$)

#+begin_src python :session foo :results output
df['SFR_0']=df[ ['SFR_Ha','SFR_FUV']].mean(axis=1, skipna=True)
df['log_SFR_0']= np.log10(df['SFR_0'])

df=df[(df.SFR_0>=10**(-3))]

df['Mass']=0.6*df['K']
#df['Mass']=df['MHI']
df=df[ ['log_SFR_Ha', 'log_SFR_FUV', 'log_SFR_0', 'log_K', 'log_MHI', 'SFR_Ha', 'SFR_FUV','SFR_0', 'K', 'MHI', 'Mass']]
#+end_src

#+RESULTS:

To calculate the average Star Formation Rate $\overline{SFR}$ we can use the equation

$$
    \overline{SFR}=\frac{\zeta M_*}{t_{sf}}
$$

where ζ is the mass-loss through stellar evolution and we assume that $\zeta\approx 1.3$ (see explanation in the paper`), M* is the mass of each galaxy and we assume that $t_{sf}=12.5\ Gyr$

#+begin_src python :session foo :results output
df['av_SFR']=df['Mass']*1.3/(12.5*10**9)
df['ratio']=df['av_SFR']/df['SFR_0']
df['log_ratio']=np.log10(df['ratio'])

print(df)
print(df[ ["SFR_0","av_SFR",'MHI','Mass']].describe(include="all"))

#+end_src

*** Checking if the data are ok

We do the plots $\overline{SFR}-SFR_o$ and Number of galaxies-$\log_{10}(\overline{SFR}/SFR_o)$
#+begin_src python :session foo :results output
df.plot(kind='scatter',y='av_SFR', x='SFR_0')
plt.xscale('log')
plt.yscale('log')
plt.savefig('graphs/av_SFR-SFR_0')
df.to_csv("out", sep="\t", columns=['SFR_0','av_SFR','Mass','ratio'])

#sns.lmplot(x='K',y='MHI',data=df,fit_reg=True).savefig("graphs/K_M.png")

g=sns.lmplot(x='SFR_0',y='av_SFR',data=df,fit_reg=True)
plt.xscale('log')
plt.yscale('log')

g.savefig("graphs/AAA.png")


t=sns.lmplot(x='log_MHI',y='log_K',data=df,fit_reg=True)
#df.plot(kind='scatter', y='K', x='MHI')
#plt.xscale('log')
#plt.yscale('log')
#plt.savefig('graphs/K_M')

t.savefig("graphs/bAA.png")
#+end_src


[[./graphs/av_SFR-SFR_0.png]], [[./graphs/K_M.png]]
[[./graphs/AAA.png]]


#+begin_src python :session foo :results output
print(df[ ["ratio","log_ratio"]].describe(include="all"))

#+end_src

#+RESULTS:
:             ratio   log_ratio
: count  586.000000  586.000000
: mean     3.590870    0.029051
: std     14.455236    0.492060
: min      0.065526   -1.183585
: 25%      0.541347   -0.266525
: 50%      0.911683   -0.040156
: 75%      1.783091    0.251173
: max    180.027326    2.255338

#+begin_src python :session foo :results output

#we can choose the number of bins acording to the Square-root choice (https://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width)
k=int(np.ceil(np.sqrt(df.shape[0])))

df.hist(column='log_ratio', bins=k)

plt.xlabel('log_ratio')
plt.ylabel('# of event')


plt.savefig('graphs/histogram_ratio.png')
#+end_src

#+RESULTS:

[[./graphs/histogram_ratio.png]]


* Calculate A and τ

To calculate the variables A, τ we will use the equations, (i need to find the values of A, τ so i can create a plot A(τ)) ($x=\frac{t_{sf}}{\tau}$)

$$
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}=\frac{A_{del}x^2e^{-x}}{t_{sf}}
$$

$$
\overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
$$

if we divide them we get:



$$
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}
$$

since we know that x>0 we can write it as $x=e^\ln{x}$ to make sure that the given solutions are all positive
$$
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^{e^\ln{x}}-e^{\ln{x}}-1}{e^\ln{x}^2}
$$

*** try
#+begin_src python :session foo :results output
for i in df.index:
    def sfrx(z):
        x = z

        tsf=12.5*10**9


        ratio=df.loc[i]['ratio']


        #f=ratio-(np.exp(x)-x-1)/x**2
        f=ratio-(np.exp(x)-np.exp(np.log(x))-1)/x**2
        return f

    #for i in df.index:
    z = fsolve(sfrx,3.0)
    df.at[i,'x']=(z)


df['tau']=12.5*10**9/df['x']

df['A_del']=df['SFR_0']*df['tau']*np.exp(df['x'])/df['x']

print(df)
print(df[ ["x", 'tau', 'A_del']].describe(include='all' ), "\n")

df.plot(kind='scatter', x='x', y='A_del')
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/x-A_3")

df.plot(kind='scatter', x='tau', y='A_del')
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/T-A_3")
#+end_src

#+RESULTS:
#+begin_example
/tmp/babel-NZGXwl/python-oYt5M4:12: RuntimeWarning: invalid value encountered in log
  f=ratio-(np.exp(x)-np.exp(np.log(x))-1)/x**2
/home/dp/.local/lib/python3.9/site-packages/scipy/optimize/_minpack_py.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
     log_SFR_Ha  log_SFR_FUV  log_SFR_0  log_K  log_MHI    SFR_Ha   SFR_FUV     SFR_0             K           MHI          Mass    av_SFR     ratio  log_ratio         A_del         x           tau
1         -2.29        -2.03  -2.140827   7.58     7.92  0.005129  0.009333  0.007231  3.801894e+07  8.317638e+07  2.281136e+07  0.002372  0.328104  -0.483988  5.290872e+08  0.541953  2.306474e+10
2         -2.68        -2.23  -2.399151   7.70     7.84  0.002089  0.005888  0.003989  5.011872e+07  6.918310e+07  3.007123e+07  0.003127  0.784034  -0.105665  1.135049e+08  1.219512  1.025000e+10
3         -1.47        -1.72  -1.577254   8.10     8.10  0.033884  0.019055  0.026470  1.258925e+08  1.258925e+08  7.553552e+07  0.007856  0.296783  -0.527561  2.413848e+09  0.467792  2.672128e+10
5         -1.51        -1.63  -1.565868   8.15     8.58  0.030903  0.023442  0.027173  1.412538e+08  3.801894e+08  8.475225e+07  0.008814  0.324379  -0.488947  2.036319e+09  0.533184  2.344405e+10
7         -1.01        -0.60  -0.758314   9.48     8.64  0.097724  0.251189  0.174456  3.019952e+09  4.365158e+08  1.811971e+09  0.188445  1.080185   0.033498  4.029546e+09  1.965489  6.359739e+09
..          ...          ...        ...    ...      ...       ...       ...       ...           ...           ...           ...       ...       ...        ...           ...       ...           ...
831         NaN        -2.89  -2.890000   7.15     6.86       NaN  0.001288  0.001288  1.412538e+07  7.244360e+06  8.475225e+06  0.000881  0.684202  -0.164815  5.046527e+07  0.874837  1.428838e+10
832       -2.18        -1.84  -1.977544   8.03     8.22  0.006607  0.014454  0.010531  1.071519e+08  1.659587e+08  6.429116e+07  0.006686  0.634934  -0.197271  5.647589e+08  0.677404  1.845280e+10
834       -2.06        -1.60  -1.771747   8.47     8.64  0.008710  0.025119  0.016914  2.951209e+08  4.365158e+08  1.770726e+08  0.018416  1.088759   0.036932  3.905923e+08  1.982903  6.303887e+09
835       -2.23        -1.79  -1.956509   7.95     7.90  0.005888  0.016218  0.011053  8.912509e+07  7.943282e+07  5.347506e+07  0.005561  0.503146  -0.298306  3.989123e+11  0.018786  6.653788e+11
836       -0.45        -0.42  -0.434741   9.70     8.70  0.354813  0.380189  0.367501  5.011872e+09  5.011872e+08  3.007123e+09  0.312741  0.850992  -0.070074  9.431535e+09  1.418358  8.813010e+09

[586 rows x 17 columns]
                x           tau         A_del
count  586.000000  5.860000e+02  5.860000e+02
mean     1.849322  1.099205e+11  2.715326e+12
std      1.470768  1.039690e+12  4.725675e+13
min      0.000559  1.932049e+09  2.477977e+07
25%      0.566731  4.172960e+09  1.393952e+08
50%      1.580993  7.906431e+09  6.707109e+08
75%      2.995479  2.205636e+10  5.658202e+09
max      6.469815  2.237735e+13  1.100078e+15
#+end_example

[[./graphs/x-A_3.png]], [[./graphs/T-A_3.png]]


#+begin_src python :session foo :results output

#we can choose the number of bins acording to the Square-root choice (https://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width)
k=int(np.ceil(np.sqrt(df.shape[0])))

df.hist(column='x', bins=k)

plt.xlabel('x3')
plt.ylabel('# of event')


plt.savefig('graphs/histogram_x3.png')
#+end_src

#+RESULTS:

[[./graphs/histogram_x3.png]]


* Find the t_sf-Mass relation

#+begin_src python :session foo :results output

for i in df.index:
    def tsfs(z):
        tsf = z

        tau=df.loc[i]['tau']
        ratio=df.loc[i]['ratio']
        SFR=df.loc[i]['SFR_0']
        A=df.loc[i]['A_del']
        x=tsf/tau
        asfr=df.loc[i]['av_SFR']

        f=SFR-A*x*np.exp(-x)/tau

        #f=asfr-A*(1-(1+np.exp(np.log(x)))*np.exp(-x))/tsf
        #f=ratio-(np.exp(x)-x-1)/x**2
        return f

    #for i in df.index:
    z = fsolve(tsfs,3.0)
    df.at[i,'tsf']=(z)

df['tsf1']=df['A_del']*(1-(1+df['x'])*np.exp(-df['x']))/df['av_SFR']

print(df[ ['tsf','tsf1']].describe(include='all'))

df.plot(kind='scatter', x='Mass', y='tsf')
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/M-tsf")

df.plot(kind='scatter', x='Mass', y='tsf1')
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/M-tsf1")
#+end_src

#+RESULTS:
#+begin_example
/home/dp/.local/lib/python3.9/site-packages/scipy/optimize/_minpack_py.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
/home/dp/.local/lib/python3.9/site-packages/scipy/optimize/_minpack_py.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
                tsf          tsf1
count  5.860000e+02  5.860000e+02
mean   2.069092e+07  1.493475e+10
std    6.309195e+07  8.883434e+09
min    7.665300e+04  1.240980e+08
25%    7.665300e+04  1.250000e+10
50%    7.665300e+04  1.250000e+10
75%    1.536030e+05  1.250000e+10
max    3.295981e+08  1.027880e+11
#+end_example

[[./graphs/M-tsf.png]]
[[./graphs/M-tsf1.png]]
