#+title:Investigations of the galaxies of the LCV
#+subtitle:Constraints on the star formation histories of galaxies in the Local Cosmological Volume
#+PROPERTY: header-args:python :tangle main.py
#+startup: preview

* python preamble
#+begin_src python :session foo
import numpy as np
import pandas as pd
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import statsmodels.formula.api as smf


def simple_regplot(data ,
    X, Y, n_std=2, n_pts=100, ax=None, scatter_kws=None, line_kws=None, ci_kws=None):
    df=data
    x=df[X]
    y=df[Y]
    """ Draw a regression line with error interval. """
    ax = plt.gca() if ax is None else ax

    # calculate best-fit line and interval
    x_fit = sm.add_constant(x)
    fit_results = sm.OLS(y, x_fit,missing='drop').fit()

    xconst=f'{fit_results.params[1]:.3f}'
    const=f'{fit_results.params[0]:.3f}'
    eval_x = sm.add_constant(np.linspace(np.min(x), np.max(x), n_pts))
    pred = fit_results.get_prediction(eval_x)

    # draw the fit line and error interval
    ci_kws = {} if ci_kws is None else ci_kws
    ax.fill_between(
        eval_x[:, 1],
        pred.predicted_mean - n_std * pred.se_mean,
        pred.predicted_mean + n_std * pred.se_mean,
        facecolor ='red',
        alpha=0.5,
        ,**ci_kws,
    )
    line_kws = {} if line_kws is None else line_kws
    h = ax.plot(eval_x[:, 1], pred.predicted_mean, **line_kws,color='red',linestyle='dashed',label= Y+"="+xconst+X+"+"+const)

    # draw the scatterplot
    scatter_kws = {} if scatter_kws is None else scatter_kws
    ax.scatter(x, y, **scatter_kws,label="Data")

    ax.set_title(Y+ "=f("+X+ ")")
    ax.grid()
    ax.set_xlabel(X)
    ax.set_ylabel(Y)
    ax.legend(loc = "best")
    if scatter_kws == {}:
        plt.show()
    else:
        PCM=ax.get_children()[2] #get the mappable, the 1st and the 2nd are the x and y axes
        plt.colorbar(PCM, ax=ax).set_label(scatter_kws["c"].name)
        plt.savefig("graphs/"+X+"-"+Y)
        plt.show()
    return fit_results

# Calculate the bin width using the Freedman-Diaconis rule
def fd_bins(x):
    iqr = df[x].quantile(0.75) - df[x].quantile(0.25)
    bin_width = 2 * iqr / df[x].count()**(1/3)

    # Calculate the number of bins using the bin width
    return int((df[x].max() - df[x].min()) / bin_width)
#+end_src

#+RESULTS:


* Tasks
** DONE Delete flags
** DONE Calculate SFR_0
** DONE Delete galaxies with $SFR_0<10^{-3}M_\odot yr^{-1}$
** DONE Calculate Mass of galaxies
** DONE Calculate $\overline{SFR}$
** DONE for $t_{sf}=12.5 Gyr$ calculate A, τ
** WAIT for $\tau=3.5 Gyr$ calculate A, tsf
** TODO for non constant t_sf try to find a relation t_sf=t_sf(Mass)

** PROJ Calculate t_g and compare it with t1 and tau
** DONE Histograms of types of galaxies
** DONE Find relations between Masses
*** There are some relations with a high $R^2$ -> ???

** [?] If I do many 2 sigma clippings then at one point it stops and we have some better results

** [?] I calculate the A_del with both equations and then I get the mean. It's not much different but maybe minimize the errors

** TODO Plot x-x_i with Type
** TODO Lelli McGaugh sparc data
** TODO Stellar-Mt color with type and SFR and the timescale
* Introduction

** The tension between the delayed-τ model and the obserations
From the delayed-τ model we are expecting $Ds=\overline{SFR}/SFR_0>1$ and for the galaxies documented in the Catalogue of Neighouring Galaxies we are expecting $Ds\approx 2$ but we observe $Ds\approx 1$ and even $Ds=0.85<1$, for the plausible assumption that the galaxies have been forming stars for $t_{sf}=12$ Gyr

We also expect by the model that the Star Formation Time-scale $\tau\approx 6.7$ Gyr, much longer than the 3.5-4.5 Gyr estimated by SP14.

** What is the point of this project?

I will try to calculate the values $A_{del},\ \tau,\ t_{sf}$, from the equations

$$
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}
$$

$$
    \overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
$$

where

$$
x\equiv\frac{t_{sf}}{\tau}
$$

for the delayed τ model

If we assume that SFH is a power law:



* Data/Karachentsev list

** Original data set

The data I will use for this project come from the Karachentsev  catalog (2022-12-02), which is an updated version of the list used in Kroupa et al. 2020
From the list I use the tables "Catalog of Nearby Galaxies", "Global Parameters of the Nearby Galaxies" and "List of the nearby galaxies with measured SFR"

Because this files include text as well, I create a script to get rid of the text and only keep the data'

#+begin_src shell
FIRST_GALAXY="AGC102728"
cd ./list
rm new_*.dat
for f in lvg*.dat
         do
             sed $f -e/$FIRST_GALAXY/\{ -e:1 -en\;b1 -e\} -ed > "new_"$f
         done
#+end_src

#+RESULTS:

We also want to keep the labels

#+begin_src shell
 FIRST_GALAXY="AGC102728"
 cd ./list
 rm label_*.dat
 for f in lvg*.dat
          do
              sed '/Note/Q' $f > "label_"$f
              sed "label_"$f -i -e/'Bytes'/\{ -e:1 -en\;b1 -e\} -ed
              sed '/--------/d' "label_"$f -i
          done
 #+end_src

 #+RESULTS:
Because we have a problem with the spaces I will create tabs between columns in VIM from the ~new_lvg*~ files to the ~newlist*~


After we have created the labels and tables files we want to put create a row with the labels and add it to the tables file.

#+begin_src shell :results output
cd ./list
for file in labels_*.dat
         do
            f="new_"$file
            cp $file $f
            sed -i '/RAh/d' $f
            sed -i '/RAm/d' $f
            sed -i '/RAs/d' $f
            sed -i '/DE-/d' $f
            sed -i '/DEd/d' $f
            sed -i '/DEm/d' $f
            sed -i 's/DEs/time/g' $f
            sed -i '/_/d' $f
            sed -i -z 's/\n/,/g' $f
         done
sed -i ' 1 s/.*/& dis_flag/' new_labels_1.dat #because the flag gets deleted
#+end_src

#+RESULTS:

#+begin_src shell
cd list
#For list 1
sed 's/\t/,/g' newlist1.dat > list1.dat
paste -sd'\n' new_labels_1.dat list1.dat> final_list1.dat
sed -i 's/\s//g' final_list1.dat

sed 's/\t/,/g' newlist2.dat > list2.dat
paste -sd'\n' new_labels_2.dat list2.dat> final_list2.dat
sed -i 's/\s//g' final_list2.dat


sed 's/\t/,/g' newlist7.dat > list7.dat
paste -sd'\n' new_labels_7.dat list7.dat> final_list7.dat
sed -i 's/\s//g' final_list7.dat

#+end_src

#+RESULTS:

Now we clear the directory:

#+begin_src shell
cd ./list

rm new_lvg*
rm label_*
rm list*.dat
rm new_label*
#+end_src

#+RESULTS:


** .dat to .csv

We will now create the final list with only the columns we need, using python

#+begin_src python :results output :tangle no
import numpy as np
import pandas as pd

df1= pd.read_csv("./list/final_list1.dat")
df2= pd.read_csv("./list/final_list2.dat")
df7= pd.read_csv("./list/final_list7.dat")

#If we keep the Kmag of df1 when we apply the flags most of the rows get dropped

df1=df1[["Name", "FUVmag", "TType", "Tdw1", "Tdw2"]]
df2=df2[["Name", "logKLum","logM26", "logMHI"]]
df7=df7[["Name","SFRHa","SFRFUV"]]

#################################################################################################
##If I want the B-Bands then uncomment
# df1.rename(columns = {"Bmag":"B1"}, inplace=True)                                             #
# df2.rename(columns = {"BMag":"B2"}, inplace=True)                                             #
# df7.rename(columns = {"BMag":"B7","SFRFUV":"log_SFR_FUV","SFRHa":"log_SFR_Ha"}, inplace=True) #
#################################################################################################
df7.rename(columns = {"SFRFUV":"log_SFR_FUV","SFRHa":"log_SFR_Ha"}, inplace=True)

data=pd.merge(pd.merge(df1,df2,on='Name'),df7, on='Name')
df=data.copy()
df.to_csv("Karachentsev_list_flags.csv",index=False)
#we put the astype, because some of the columns are not strings and this fixes the errors
for col in df.columns:
    df=df[df[col].astype(str).str.contains(">|<|\*")==False]

df.to_csv("Karachentsev_list.csv",index=False)
#+end_src

#+RESULTS:

#+begin_src python :session foo :results output
df=pd.read_csv("Karachentsev_list.csv")

df["TType"]=df["TType"].astype('category')
df["Tdw1"]=df["Tdw1"].astype('category')
df["Tdw2"]=df["Tdw2"].astype('category')

df['SFR_Ha']=10**df['log_SFR_Ha']

df['SFR_FUV']=10**df['log_SFR_FUV']

df['K']=10**df['logKLum']

df['MHI']=10**df['logMHI']
#+end_src

#+RESULTS:


* Calculations for values that we need

Now we have to calculate the total SFR from the equation:

$$
    SFR_o=\frac{SFR_{FUV}+SFR_{Ha}}{2}
$$

if we have both the SFR. If we only have one of them then:

$$
    SFR_o=SFR_i,\ \text{if } SFR_j=0,\ i\neq j,\ i,j=SFR_{FUV},\, SFR_{Ha}
$$

For that we can use the .mean() function of Pandas which calculates the mean $\sum_0^N x_i/N$. We will not have a problem with the NaN values, since the function will ignore them.

We also only need to keep the galaxies with $SFR_0\geq 10^{-3}$

We can also calculate the StellarMass of each galaxy from the K-band luminosity using a mass-to-light ratio of 0.6 ($M_\odot/Lum$)

#+begin_src python :session foo :results output
df['SFR_0']=df[ ['SFR_Ha','SFR_FUV']].mean(axis=1, skipna=True)
df['log_SFR_0']= np.log10(df['SFR_0'])

df=df[(df.SFR_0>=10**(-3))]

df['StellarMass']=0.6*df['K']
df["logStellarMass"]=np.log10(df['StellarMass'])
#+end_src

#+RESULTS:


To calculate the average Star Formation Rate $\overline{SFR}$ we can use the equation

$$
    \overline{SFR}=\frac{\zeta M_*}{t_{sf}}
$$

where ζ is the mass-loss through stellar evolution and we assume that $\zeta\approx 1.3$ (see explanation in the paper`), M* is the mass of each galaxy and we assume that  i$t_{sf}=12.5\ Gyr$

#+begin_src python :session foo :results output
df['av_SFR']=df['StellarMass']*1.3/(12.5*10**9)
df['log_av_SFR']=np.log10(df['av_SFR'])

df['ratio']=df['av_SFR']/df['SFR_0']
df['log_ratio']=np.log10(df['ratio'])

data["log_ratio"]=df["log_ratio"]
#+end_src

#+RESULTS:

We will also need the mass of the total gas of the Galaxies. According to the second paper it is:

$$
M_g=1.33\cdot M_{HI}
$$

And the total mass of the galaxy is given by
$$
M_t=M_g+M_*
$$

#+begin_src python :session foo :results output
df["Mg"]=1.33*df["MHI"]
df["logMg"]=np.log10(df["Mg"])

df["Mt"]=df["Mg"]+df["StellarMass"]
df['logMt']=np.log10(df['Mt'])

print(df[ ["SFR_0","av_SFR","ratio","log_ratio",'Mt','MHI','StellarMass','Mg']].describe(include="all"))
#+end_src

#+RESULTS:
#+begin_example
            SFR_0      av_SFR       ratio  ...           MHI   StellarMass            Mg
count  579.000000  578.000000  578.000000  ...  5.380000e+02  5.780000e+02  5.380000e+02
mean     0.154407    0.392575    3.387887  ...  5.676207e+08  3.774758e+09  7.549356e+08
std      0.448072    1.340746   14.109888  ...  1.454783e+09  1.289179e+10  1.934862e+09
min      0.001023    0.000197    0.065526  ...  2.884032e+06  1.897367e+06  3.835762e+06
25%      0.003667    0.003529    0.542246  ...  4.073803e+07  3.393696e+07  5.418158e+07
50%      0.012803    0.012595    0.916552  ...  1.258925e+08  1.211100e+08  1.674371e+08
75%      0.069084    0.069616    1.770790  ...  4.241520e+08  6.693800e+08  5.641221e+08
max      4.387176   13.037208  180.027326  ...  2.041738e+10  1.253578e+11  2.715511e+10

[8 rows x 8 columns]
#+end_example

*** Checking if the data are ok

We do the plots $\overline{SFR}-SFR_o$ and Number of galaxies-$\log_{10}(\overline{SFR}/SFR_o)$
#+begin_src python :session foo :results output
df.plot(kind='scatter',y='av_SFR', x='SFR_0', grid="True")
plt.xscale('log')
plt.yscale('log')
plt.savefig('graphs/av_SFR-SFR_0')
plt.show()
simple_regplot('log_SFR_0','log_av_SFR')
#+end_src

#+RESULTS:
: QSocketNotifier: Can only be used with threads started with QThread
:
: (python3:25173): Gtk-[1;33mWARNING[0m **: [34m11:42:14.199[0m: Theme parsing error: gtk.css:3932:55: Using one color stop with linear-gradient() is deprecated.
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

[[./graphs/av_SFR-SFR_0.png]]
[[./graphs/log_SFR_0-log_av_SFR.png]]


** 2 sigma clipping
We take out all the data further than $2\sigma$

#+begin_src python :session foo :results output
da=df["log_ratio"]
print(da.describe())
# Calculate the mean and standard deviation of the da
mean = da.mean()
std = da.std()

# Define the lower and upper bounds for the 2-sigma range
lower = mean - 2*std
upper = mean + 2*std

# Filter out the values outside of the 2-sigma range
df = df[(da >= lower) & (da <= upper)]
print(da.describe())
iqr = data['log_ratio'].quantile(0.75) - data['log_ratio'].quantile(0.25)
bin_width = 2 * iqr / data['log_ratio'].count()**(1/3)

# Calculate the number of bins using the bin width
binss= int((data['log_ratio'].max() - data['log_ratio'].min()) / bin_width)

binsss= int((da.max() - da.min()) / bin_width)

data["log_ratio"].hist(bins=binss,edgecolor= "blue")
da.hist(bins=binsss,alpha=0.5,edgecolor='red')
plt.show()


df = df[(df["log_ratio"] >= lower) & (df["log_ratio"] <= upper)]
print(df.count() , df['ratio'].describe())
#+end_src

#+RESULTS:
#+begin_example
count    578.000000
mean       0.024925
std        0.477810
min       -1.183585
25%       -0.265804
50%       -0.037847
75%        0.248157
max        2.255338
Name: log_ratio, dtype: float64
count    578.000000
mean       0.024925
std        0.477810
min       -1.183585
25%       -0.265804
50%       -0.037847
75%        0.248157
max        2.255338
Name: log_ratio, dtype: float64
#+end_example


* Calculate A and τ

To calculate the variables A, τ we will use the equations, (i need to find the values of A, τ so I can create a plot A(τ)) ($x=\frac{t_{sf}}{\tau}$)

$$
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}=\frac{A_{del}x^2e^{-x}}{t_{sf}}
$$

$$
\overline{SFR_{del}}=\frac{A_{del}}{t_{sf}}[1-(1+x)e^{-x}]
$$

if we divide them we get:



$$
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}=\frac{e^x-e^{\ln{x}}-1}{x^2}
$$

we write the x like that because it needs to be positive and we can not define it in the fsolve function


#+begin_src python :session foo :results output
for i in df.index:
    def sfrx(z):
        x = z

        ratio=df.loc[i]['ratio']

        #f=ratio-(np.exp(x)-np.abs(x)-1)/x**2
        f=ratio-(np.exp(x)-np.exp(np.log(x))-1)/x**2
        return f

    #for i in df.index:
    z = fsolve(sfrx,3.0)
    df.at[i,'x']=(z)

#+end_src

#+RESULTS:
#+begin_example
/tmp/babel-Z1YK67/python-QPKIS8:8: RuntimeWarning: invalid value encountered in log
  f=ratio-(np.exp(x)-np.exp(np.log(x))-1)/x**2
/usr/lib64/python3.11/site-packages/scipy/optimize/_minpack_py.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
/tmp/babel-Z1YK67/python-QPKIS8:13: SettingWithCopyWarning:
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df.at[i,'x']=(z)
/tmp/babel-Z1YK67/python-QPKIS8:8: RuntimeWarning: invalid value encountered in log
  f=ratio-(np.exp(x)-np.exp(np.log(x))-1)/x**2
/usr/lib64/python3.11/site-packages/scipy/optimize/_minpack_py.py:175: RuntimeWarning: The iteration is not making good progress, as measured by the
  improvement from the last ten iterations.
  warnings.warn(msg, RuntimeWarning)
#+end_example

#+begin_src python :session foo :results output
df.hist(column='x', bins=fd_bins('x'))

plt.xlabel('x')
plt.ylabel('# of event')

plt.savefig('graphs/histogram_x3.png')

plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

[[./graphs/histogram_x3.png]]

*** Fixed tsf=12.5 Gyr

Having found the x from the above equation (the ratio does not change for the two calculations) we can now calculate the tau and the A


$$
x=\frac{t_{sf}}{\tau}\Rightarrow \tau=\frac{t_{sf}}{x}
$$

$$
    SFR_{0,del}=\frac{A_{del}xe^{-x}}{\tau}\Rightarrow A_{del}= \frac{SFR_{0,del}\cdot \tau\cdot\exp{x}}{x}
$$



#+begin_src python :session foo :results output
tsf=12.5*10**9

df['tau']=tsf/df['x']
df["log_tau"]=np.log10(df["tau"])

df['A']=df['SFR_0']*df['tau']*np.exp(df['x'])/df['x']

df["a"]=df["av_SFR"]*tsf/(1-(1+df["x"])*np.exp(-df['x']))

df["A_del"]=df[ ["a","A"]].mean(axis=1, skipna=True)

print(df[ ["x", 'tau','A', 'A_del','StellarMass','a']].describe(include='all' ), "\n")
#+end_src

#+begin_src python :session foo  :colnames no :results output
print(df[ ["x", 'tau','A_del']].describe(include='all' ), "\n")

#+end_src

#+RESULTS:
:                 x           tau         A_del
: count  550.000000  5.500000e+02  5.500000e+02
: mean     1.762321  1.126908e+11  2.600301e+12
: std      1.388768  1.067717e+12  4.456457e+13
: min      0.000559  2.198306e+09  2.477977e+07
: 25%      0.558532  4.481783e+09  1.355973e+08
: 50%      1.513139  8.260984e+09  6.446495e+08
: 75%      2.789068  2.238008e+10  5.172220e+09
: max      5.686198  2.237735e+13  1.005083e+15




#+begin_src python :session foo :results output
df.plot(kind='scatter', x='x', y='A_del',c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/x-A_3")

df.plot(kind='scatter', x='tau', y="A_del", c= "logMt")
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/T-A_3")
plt.show()

#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()


[[./graphs/x-A_3.png]], [[./graphs/T-A_3.png]]



*** Fixed tau=3.5 Gyr
We have a hidden tsf in the av_SFR so we cannot use the same av_SFR and ratio

$$
\overline{SFR}=\frac{\zeta M_*}{x\tau}
$$


$$
    \frac{\overline{SFR_{del}}}{SFR_{0,del}}=\frac{e^x-x-1}{x^2}\Leftrightarrow \frac{e^x-x-1}{x}=\frac{\zeta M_*}{SFR\cdot\tau}
$$

#+begin_src python :session foo :results output
dp=df[["Name","TType","SFR_0","logMt","StellarMass","A_del","tau","x"]].copy()
dp['log_tau'] = np.log10(dp.tau)
tau=3.5*10**9
dp["z"]=1.3*dp["StellarMass"]/tau


for i in df.index:
    def sfrx(z):
        x = z

        cons=dp.loc[i]['z']
        SFR=dp.loc[i]['SFR_0']


        #f=ratio-(np.exp(x)-np.abs(x)-1)/x**2
        f=cons/SFR-(np.exp(x)-np.exp(np.log(x))-1)/x
        return f

    #for i in df.index:
    z = fsolve(sfrx,3.0)
    dp.at[i,'x_i']=(z)
dp["tsf"]=dp['x_i']*tau
dp["log_tsf"]=np.log10(dp.tsf)
dp["av_SFR"]=dp.z/dp.x_i
dp['ratio']=dp.av_SFR/dp.SFR_0
dp['A']=tau*dp['SFR_0']*np.exp(dp.x_i)/dp.x_i

print(dp[['A','tsf','x_i']].describe())

#+end_src

#+RESULTS:
:                   A           tsf         x_i
: count  5.500000e+02  5.500000e+02  550.000000
: mean   4.192335e+09  8.727310e+09    2.493517
: std    1.432226e+10  3.097809e+09    0.885088
: min    9.870027e+06  2.323533e+09    0.663867
: 25%    6.466448e+07  6.441713e+09    1.840489
: 50%    2.234694e+08  8.383763e+09    2.395361
: 75%    1.034826e+09  1.077179e+10    3.077654
: max    1.057699e+11  1.796414e+10    5.132611

#+begin_src python :session foo :results output
dp.plot(kind='scatter', x='x_i', y='A',c='logMt')
plt.xscale('log')
plt.yscale('log')
plt.savefig("graphs/x-A_tau")
plt.show()

#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
dp['af']=dp[["A_del","A"]].mean(axis=1, skipna=True)
dp.plot(kind='scatter', x='x_i', y='af',c='logMt')
plt.xscale('log')
plt.yscale('log')
plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
dp['log_A_del']=np.log10(dp.A_del)
dp['log_A']=np.log10(dp.A)
print(dp[['A','A_del','af']].describe())

#+end_src

#+RESULTS:
:                   A         A_del            af
: count  5.500000e+02  5.500000e+02  5.500000e+02
: mean   4.192335e+09  2.600301e+12  1.302247e+12
: std    1.432226e+10  4.456457e+13  2.228220e+13
: min    9.870027e+06  2.477977e+07  2.145044e+07
: 25%    6.466448e+07  1.355973e+08  1.191973e+08
: 50%    2.234694e+08  6.446495e+08  4.845113e+08
: 75%    1.034826e+09  5.172220e+09  3.409221e+09
: max    1.057699e+11  1.005083e+15  5.025416e+14


#+begin_src python :session foo :results output
print(dp[['x','x_i']].describe())
#+end_src

#+RESULTS:
:                 x         x_i
: count  550.000000  550.000000
: mean     1.762321    2.493517
: std      1.388768    0.885088
: min      0.000559    0.663867
: 25%      0.558532    1.840489
: 50%      1.513139    2.395361
: 75%      2.789068    3.077654
: max      5.686198    5.132611

#+begin_src python :session foo :results output
simple_regplot(dp,'log_A_del','log_A',scatter_kws={"c":dp["logMt"]})
#+end_src

#+RESULTS:


#+begin_src python :session foo :results output
dp.plot(kind='scatter', x='log_tau', y='tsf',c='logMt')
plt.xscale('log')
plt.yscale('log')
plt.show()

#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
x=simple_regplot(dp,'x','x_i',scatter_kws={"c":dp["logMt"]})
x=simple_regplot(dp,'x','x_i',scatter_kws={"c":dp["TType"]})
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
print(x.summary())
#+end_src


#+begin_src python :session foo :results output
temp_dataf=dp[['Name','tsf']]
df = pd.merge(df, temp_dataf , on = 'Name', how = 'outer')
print(df['tsf'])
#+end_src


* Calculate the gas depletion timescale $\tau_g$

The gas depletion timescale τg measures the time taken by a galaxy to exhaust its gas content Mg given the current SFR (Pflamm-Altenburg & Kroupa 2009).
$$
\tau_g=\frac{M_g}{\dot{M_*}}=\frac{M_g}{SFR}
$$

#+begin_src python :session foo :results output

df["tau_g"]=df["Mg"]/df["SFR_0"]
df["log_tau_g"]=np.log10(df["tau_g"])
print(df["tau_g"].describe())
#+end_src

#+RESULTS:
: count    5.160000e+02
: mean     1.532642e+10
: std      2.526379e+10
: min      2.149192e+08
: 25%      5.279775e+09
: 50%      1.030695e+10
: 75%      1.766921e+10
: max      4.611600e+11
: Name: tau_g, dtype: float64

#+begin_src python :session foo :results output
df.plot(kind="scatter",x="Mg",y="tau_g", c = 'logStellarMass')
plt.xscale('log')
plt.yscale('log')
plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

Having calculated the gas timescale, we compare it with the $\tau$ and t1

#+begin_src python :session foo :results output
df.plot(kind="scatter",x="x",y="tau_g", c = 'logStellarMass')
plt.xscale('log')
plt.yscale('log')
plt.show()
#+end_src

** TODO high protential low tau
#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
df.plot(kind="scatter",x="tau",y="tau_g", c = 'logStellarMass')
plt.xscale('log')
plt.yscale('log')
plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

#+begin_src python :session foo :results output
df.plot(kind="scatter",x="tsf",y="tau_g", c = 'logStellarMass')
plt.xscale('log')
plt.yscale('log')
plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
** TODO Check the data to see if it has the ages/color of the galaxies

* DONE Type of Galaxies
#+begin_src python :session foo :results output
typ=pd.read_csv("Karachentsev_list_flags.csv")

typ["TType"]=typ["TType"].astype('category')
typ["Tdw1"]=typ["Tdw1"].astype('category')
typ["Tdw2"]=typ["Tdw2"].astype('category')
print(typ.count())
typ['TType'].value_counts(sort=False).plot(kind='bar',logy=True,grid = 'True')
plt.xlabel("Morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("graphs/hist-Type")
plt.show()

typ['Tdw1'].value_counts(sort=False).plot(kind='bar', logy=True,grid = 'True')
plt.xlabel("Dwarf galaxy morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("graphs/hist-Tdw1")
plt.show()

typ['Tdw2'].value_counts(sort=False).plot(kind='bar', logy=True,grid = 'True')
plt.xlabel("Dwarf galaxy surface brightness morphology")
plt.ylabel("Number of Galaxies")
plt.savefig("graphs/hist-Tdw2")
plt.show()
#+end_src

#+RESULTS:
#+begin_example
Name           1248
FUVmag         1116
TType          1248
Tdw1           1022
Tdw2           1009
logKLum        1244
logM26          748
logMHI          875
log_SFR_Ha      736
log_SFR_FUV    1117
dtype: int64
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
#+end_example

[[./graphs/hist-Type.png]]
[[./graphs/hist-Tdw1.png]]
[[./graphs/hist-Tdw2.png]]

#+begin_src python :session foo :results output

#we can choose the number of bins acording to the Square-root choice (https://en.wikipedia.org/wiki/Histogram#Number_of_bins_and_width)
k=int(np.ceil(np.sqrt(df.shape[0])))

df.hist(column='x', bins=k)

plt.xlabel('x3')
plt.ylabel('# of event')


plt.savefig('graphs/histogram_x3.png')

plt.show()

#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()

[[./graphs/histogram_x3.png]]


* Mass relations
We will check to see if there is a correlation between the masses

** Stellar Mass - Hydrogen Mass

#+begin_src python :session foo :results output
mhi_mass=simple_regplot(df,"logStellarMass","logMHI",scatter_kws={"c": df["log_tau_g"]})
print(mhi_mass.summary())
#+end_src


** Stellar Mass - Gas Mass
** color with M*/sfr timescale
#+begin_src python :session foo :results output
mg_mass=simple_regplot(df,"logMg","logStellarMass")
print(mg_mass.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:         logStellarMass   R-squared:                       0.692
Model:                            OLS   Adj. R-squared:                  0.692
Method:                 Least Squares   F-statistic:                     1156.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          1.25e-133
Time:                        16:43:44   Log-Likelihood:                -391.11
No. Observations:                 516   AIC:                             786.2
Df Residuals:                     514   BIC:                             794.7
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         -0.6515      0.262     -2.484      0.013      -1.167      -0.136
logMg          1.0754      0.032     34.002      0.000       1.013       1.138
==============================================================================
Omnibus:                       33.431   Durbin-Watson:                   2.003
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               43.468
Skew:                           0.543   Prob(JB):                     3.64e-10
Kurtosis:                       3.918   Cond. No.                         96.9
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example


** Stellar Mass - Mass within Holmberg radius

#+begin_src python :session foo :results output
mass_m26=simple_regplot(df,"logStellarMass","logM26",scatter_kws={"c": df["log_tau_g"]})
print(mass_m26.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                 logM26   R-squared:                       0.795
Model:                            OLS   Adj. R-squared:                  0.794
Method:                 Least Squares   F-statistic:                     1999.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          1.29e-179
Time:                        20:39:02   Log-Likelihood:                -399.03
No. Observations:                 518   AIC:                             802.1
Df Residuals:                     516   BIC:                             810.6
Df Model:                           1
Covariance Type:            nonrobust
==================================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
----------------------------------------------------------------------------------
const             -0.4096      0.205     -1.998      0.046      -0.812      -0.007
logStellarMass     1.1064      0.025     44.712      0.000       1.058       1.155
==============================================================================
Omnibus:                       50.311   Durbin-Watson:                   1.869
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               68.467
Skew:                          -0.723   Prob(JB):                     1.36e-15
Kurtosis:                       4.039   Cond. No.                         74.9
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example

[[./graphs/logStellarMass-logM26.png]]


** Gas Mass - Mass within Holmberg radius

#+begin_src python :session foo :results output
mg_m26=simple_regplot(df,"logMg","logM26")
print(mg_m26.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                 logM26   R-squared:                       0.767
Model:                            OLS   Adj. R-squared:                  0.767
Method:                 Least Squares   F-statistic:                     1696.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          6.55e-165
Time:                        11:42:57   Log-Likelihood:                -430.71
No. Observations:                 516   AIC:                             865.4
Df Residuals:                     514   BIC:                             873.9
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         -2.9195      0.283    -10.310      0.000      -3.476      -2.363
logMg          1.4064      0.034     41.182      0.000       1.339       1.474
==============================================================================
Omnibus:                       16.463   Durbin-Watson:                   1.992
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               36.296
Skew:                           0.025   Prob(JB):                     1.31e-08
Kurtosis:                       4.298   Cond. No.                         96.9
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example



[[./graphs/logMg-logM26.png]]


** Mass within Holmberg radius - Hydrogen Mass

#+begin_src python :session foo :results output
mhi_m26=simple_regplot(df,"logMHI","logM26")
print(mhi_m26.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                 logM26   R-squared:                       0.767
Model:                            OLS   Adj. R-squared:                  0.767
Method:                 Least Squares   F-statistic:                     1696.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          6.55e-165
Time:                        11:42:58   Log-Likelihood:                -430.71
No. Observations:                 516   AIC:                             865.4
Df Residuals:                     514   BIC:                             873.9
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         -2.7453      0.279     -9.841      0.000      -3.293      -2.197
logMHI         1.4064      0.034     41.182      0.000       1.339       1.474
==============================================================================
Omnibus:                       16.463   Durbin-Watson:                   1.992
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               36.296
Skew:                           0.025   Prob(JB):                     1.31e-08
Kurtosis:                       4.298   Cond. No.                         94.0
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example


[[./graphs/logMHI-logM26.png]]



** Total Mass - Stellar Mass

#+begin_src python :session foo :results output
mass_mt=simple_regplot(df,"logStellarMass","logMt",scatter_kws={"c": df["log_tau_g"]})
mass_mt=simple_regplot(df,"logStellarMass","logMt",scatter_kws={"c": df["log_SFR_0"]})
print(mass_mt.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                  logMt   R-squared:                       0.935
Model:                            OLS   Adj. R-squared:                  0.934
Method:                 Least Squares   F-statistic:                     7348.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          1.32e-306
Time:                        20:43:06   Log-Likelihood:                 79.340
No. Observations:                 516   AIC:                            -154.7
Df Residuals:                     514   BIC:                            -146.2
Df Model:                           1
Covariance Type:            nonrobust
==================================================================================
                     coef    std err          t      P>|t|      [0.025      0.975]
----------------------------------------------------------------------------------
const              1.6751      0.081     20.565      0.000       1.515       1.835
logStellarMass     0.8429      0.010     85.723      0.000       0.824       0.862
==============================================================================
Omnibus:                       61.904   Durbin-Watson:                   1.943
Prob(Omnibus):                  0.000   Jarque-Bera (JB):              100.723
Skew:                           0.770   Prob(JB):                     1.34e-22
Kurtosis:                       4.521   Cond. No.                         74.8
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example


** Total Mass - Gas Mass

#+begin_src python :session foo :results output
mg_mt=simple_regplot(df,"logMg","logMt",scatter_kws={"c":df['log_SFR_0']})
mg_mt=simple_regplot(df,"logMg","logMt",scatter_kws={"c":df['log_tau_g']})
print(mg_mt.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                  logMt   R-squared:                       0.868
Model:                            OLS   Adj. R-squared:                  0.867
Method:                 Least Squares   F-statistic:                     3371.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          6.54e-228
Time:                        20:44:33   Log-Likelihood:                -102.53
No. Observations:                 516   AIC:                             209.1
Df Residuals:                     514   BIC:                             217.6
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const         -0.0577      0.150     -0.385      0.701      -0.352       0.237
logMg          1.0498      0.018     58.062      0.000       1.014       1.085
==============================================================================
Omnibus:                      231.406   Durbin-Watson:                   2.022
Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1041.871
Skew:                           2.014   Prob(JB):                    5.76e-227
Kurtosis:                       8.678   Cond. No.                         96.9
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example



** Total Mass - Hydrogen Mass

#+begin_src python :session foo :results output
mhi_mt=simple_regplot(df,"logMHI","logMt")
print(mhi_mt.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                  logMt   R-squared:                       0.868
Model:                            OLS   Adj. R-squared:                  0.867
Method:                 Least Squares   F-statistic:                     3371.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          6.54e-228
Time:                        11:43:00   Log-Likelihood:                -102.53
No. Observations:                 516   AIC:                             209.1
Df Residuals:                     514   BIC:                             217.6
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const          0.0723      0.148      0.490      0.625      -0.218       0.362
logMHI         1.0498      0.018     58.062      0.000       1.014       1.085
==============================================================================
Omnibus:                      231.406   Durbin-Watson:                   2.022
Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1041.871
Skew:                           2.014   Prob(JB):                    5.76e-227
Kurtosis:                       8.678   Cond. No.                         94.0
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example

    

** Total Mass - Mass within Holmberg radius

#+begin_src python :session foo :results output
m26_mt=simple_regplot(df,"logM26","logMt")
print(m26_mt.summary())
#+end_src

#+RESULTS:
#+begin_example
qt.qpa.wayland: Wayland does not support QWindow::requestActivate()
                            OLS Regression Results
==============================================================================
Dep. Variable:                  logMt   R-squared:                       0.846
Model:                            OLS   Adj. R-squared:                  0.846
Method:                 Least Squares   F-statistic:                     2821.
Date:                Wed, 15 Mar 2023   Prob (F-statistic):          7.21e-211
Time:                        11:43:00   Log-Likelihood:                -141.91
No. Observations:                 516   AIC:                             287.8
Df Residuals:                     514   BIC:                             296.3
Df Model:                           1
Covariance Type:            nonrobust
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const          2.9983      0.107     28.113      0.000       2.789       3.208
logM26         0.6456      0.012     53.115      0.000       0.622       0.669
==============================================================================
Omnibus:                       10.154   Durbin-Watson:                   1.884
Prob(Omnibus):                  0.006   Jarque-Bera (JB):               10.172
Skew:                           0.331   Prob(JB):                      0.00618
Kurtosis:                       3.185   Cond. No.                         67.4
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
#+end_example



** Stellar Mass - Mass within Holmberg radius - Hydrogen Mass - Total Mass

#+begin_src python :session foo :results output
plt.scatter(10**df["logM26"], df["StellarMass"],label= "M26")
plt.scatter(df["MHI"], df["StellarMass"], label= "MHI")
plt.scatter(df["Mt"], df["StellarMass"], label= "MHI")
plt.legend(loc= "upper left")
plt.xlabel("StellarMass")
plt.xscale("log")
plt.yscale("log")
plt.title("M26, MHI=f(StellarMass), log")
plt.savefig('graphs/M-MHI-M26')
plt.show()
#+end_src

#+RESULTS:
: qt.qpa.wayland: Wayland does not support QWindow::requestActivate()


[[./graphs/M-MHI-M26.png]]


